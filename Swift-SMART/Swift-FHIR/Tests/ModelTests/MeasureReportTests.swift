//
//  MeasureReportTests.swift
//  SwiftFHIR
//
//  Generated from FHIR 4.0.0-a53ec6ee1b on 2019-03-01.
//  2019, SMART Health IT.
//

import XCTest
#if !NO_MODEL_IMPORT
import Models
typealias SwiftFHIRMeasureReport = Models.MeasureReport
#else
import SwiftFHIR
typealias SwiftFHIRMeasureReport = SwiftFHIR.MeasureReport
#endif


class MeasureReportTests: XCTestCase {
	
	func instantiateFrom(filename: String) throws -> SwiftFHIRMeasureReport {
		return try instantiateFrom(json: try readJSONFile(filename))
	}
	
	func instantiateFrom(json: FHIRJSON) throws -> SwiftFHIRMeasureReport {
		return try SwiftFHIRMeasureReport(json: json)
	}
	
	func testMeasureReport1() {
		do {
			let instance = try runMeasureReport1()
			try runMeasureReport1(instance.asJSON())
		}
		catch let error {
			XCTAssertTrue(false, "Must instantiate and test MeasureReport successfully, but threw:\n---\n\(error)\n---")
		}
	}
	
	@discardableResult
	func runMeasureReport1(_ json: FHIRJSON? = nil) throws -> SwiftFHIRMeasureReport {
		let inst = (nil != json) ? try instantiateFrom(json: json!) : try instantiateFrom(filename: "measurereport-cms146-cat1-example.json")
		
		XCTAssertEqual(inst.contained?[0].id, "reporter")
		XCTAssertEqual(inst.date?.description, "2014-04-01")
		XCTAssertEqual(inst.evaluatedResource?[0].reference, "Condition/123")
		XCTAssertEqual(inst.group?[0].id, "CMS146-group-1")
		XCTAssertEqual(inst.group?[0].population?[0].code?.coding?[0].code, "initial-population")
		XCTAssertEqual(inst.group?[0].population?[0].count, 1)
		XCTAssertEqual(inst.group?[0].population?[1].code?.coding?[0].code, "numerator")
		XCTAssertEqual(inst.group?[0].population?[1].count, 1)
		XCTAssertEqual(inst.group?[0].population?[2].code?.coding?[0].code, "denominator")
		XCTAssertEqual(inst.group?[0].population?[2].count, 1)
		XCTAssertEqual(inst.group?[0].population?[3].code?.coding?[0].code, "denominator-exclusion")
		XCTAssertEqual(inst.group?[0].population?[3].count, 0)
		XCTAssertEqual(inst.group?[0].stratifier?[0].code?[0].text, "stratifier-ages-up-to-9")
		XCTAssertEqual(inst.group?[0].stratifier?[0].stratum?[0].population?[0].code?.coding?[0].code, "initial-population")
		XCTAssertEqual(inst.group?[0].stratifier?[0].stratum?[0].population?[0].count, 1)
		XCTAssertEqual(inst.group?[0].stratifier?[0].stratum?[0].population?[1].code?.coding?[0].code, "numerator")
		XCTAssertEqual(inst.group?[0].stratifier?[0].stratum?[0].population?[1].count, 1)
		XCTAssertEqual(inst.group?[0].stratifier?[0].stratum?[0].population?[2].code?.coding?[0].code, "denominator")
		XCTAssertEqual(inst.group?[0].stratifier?[0].stratum?[0].population?[2].count, 1)
		XCTAssertEqual(inst.group?[0].stratifier?[0].stratum?[0].population?[3].code?.coding?[0].code, "denominator-exclusion")
		XCTAssertEqual(inst.group?[0].stratifier?[0].stratum?[0].population?[3].count, 0)
		XCTAssertEqual(inst.group?[0].stratifier?[0].stratum?[0].value?.text, "true")
		XCTAssertEqual(inst.group?[0].stratifier?[0].stratum?[1].population?[0].code?.coding?[0].code, "initial-population")
		XCTAssertEqual(inst.group?[0].stratifier?[0].stratum?[1].population?[0].count, 0)
		XCTAssertEqual(inst.group?[0].stratifier?[0].stratum?[1].population?[1].code?.coding?[0].code, "numerator")
		XCTAssertEqual(inst.group?[0].stratifier?[0].stratum?[1].population?[1].count, 0)
		XCTAssertEqual(inst.group?[0].stratifier?[0].stratum?[1].population?[2].code?.coding?[0].code, "denominator")
		XCTAssertEqual(inst.group?[0].stratifier?[0].stratum?[1].population?[2].count, 0)
		XCTAssertEqual(inst.group?[0].stratifier?[0].stratum?[1].population?[3].code?.coding?[0].code, "denominator-exclusion")
		XCTAssertEqual(inst.group?[0].stratifier?[0].stratum?[1].population?[3].count, 0)
		XCTAssertEqual(inst.group?[0].stratifier?[0].stratum?[1].value?.text, "false")
		XCTAssertEqual(inst.group?[0].stratifier?[1].code?[0].text, "stratifier-ages-10-plus")
		XCTAssertEqual(inst.group?[0].stratifier?[1].stratum?[0].population?[0].code?.coding?[0].code, "initial-population")
		XCTAssertEqual(inst.group?[0].stratifier?[1].stratum?[0].population?[0].count, 0)
		XCTAssertEqual(inst.group?[0].stratifier?[1].stratum?[0].population?[1].code?.coding?[0].code, "numerator")
		XCTAssertEqual(inst.group?[0].stratifier?[1].stratum?[0].population?[1].count, 0)
		XCTAssertEqual(inst.group?[0].stratifier?[1].stratum?[0].population?[2].code?.coding?[0].code, "denominator")
		XCTAssertEqual(inst.group?[0].stratifier?[1].stratum?[0].population?[2].count, 0)
		XCTAssertEqual(inst.group?[0].stratifier?[1].stratum?[0].population?[3].code?.coding?[0].code, "denominator-exclusion")
		XCTAssertEqual(inst.group?[0].stratifier?[1].stratum?[0].population?[3].count, 0)
		XCTAssertEqual(inst.group?[0].stratifier?[1].stratum?[0].value?.text, "true")
		XCTAssertEqual(inst.group?[0].stratifier?[1].stratum?[1].population?[0].code?.coding?[0].code, "initial-population")
		XCTAssertEqual(inst.group?[0].stratifier?[1].stratum?[1].population?[0].count, 1)
		XCTAssertEqual(inst.group?[0].stratifier?[1].stratum?[1].population?[1].code?.coding?[0].code, "numerator")
		XCTAssertEqual(inst.group?[0].stratifier?[1].stratum?[1].population?[1].count, 1)
		XCTAssertEqual(inst.group?[0].stratifier?[1].stratum?[1].population?[2].code?.coding?[0].code, "denominator")
		XCTAssertEqual(inst.group?[0].stratifier?[1].stratum?[1].population?[2].count, 1)
		XCTAssertEqual(inst.group?[0].stratifier?[1].stratum?[1].population?[3].code?.coding?[0].code, "denominator-exclusion")
		XCTAssertEqual(inst.group?[0].stratifier?[1].stratum?[1].population?[3].count, 0)
		XCTAssertEqual(inst.group?[0].stratifier?[1].stratum?[1].value?.text, "false")
		XCTAssertEqual(inst.group?[0].stratifier?[2].code?[0].text, "stratifier-gender")
		XCTAssertEqual(inst.group?[0].stratifier?[2].stratum?[0].population?[0].code?.coding?[0].code, "initial-population")
		XCTAssertEqual(inst.group?[0].stratifier?[2].stratum?[0].population?[0].count, 1)
		XCTAssertEqual(inst.group?[0].stratifier?[2].stratum?[0].population?[1].code?.coding?[0].code, "numerator")
		XCTAssertEqual(inst.group?[0].stratifier?[2].stratum?[0].population?[1].count, 1)
		XCTAssertEqual(inst.group?[0].stratifier?[2].stratum?[0].population?[2].code?.coding?[0].code, "denominator")
		XCTAssertEqual(inst.group?[0].stratifier?[2].stratum?[0].population?[2].count, 1)
		XCTAssertEqual(inst.group?[0].stratifier?[2].stratum?[0].population?[3].code?.coding?[0].code, "denominator-exclusion")
		XCTAssertEqual(inst.group?[0].stratifier?[2].stratum?[0].population?[3].count, 0)
		XCTAssertEqual(inst.group?[0].stratifier?[2].stratum?[0].value?.text, "male")
		XCTAssertEqual(inst.group?[0].stratifier?[2].stratum?[1].population?[0].code?.coding?[0].code, "initial-population")
		XCTAssertEqual(inst.group?[0].stratifier?[2].stratum?[1].population?[0].count, 0)
		XCTAssertEqual(inst.group?[0].stratifier?[2].stratum?[1].population?[1].code?.coding?[0].code, "numerator")
		XCTAssertEqual(inst.group?[0].stratifier?[2].stratum?[1].population?[1].count, 0)
		XCTAssertEqual(inst.group?[0].stratifier?[2].stratum?[1].population?[2].code?.coding?[0].code, "denominator")
		XCTAssertEqual(inst.group?[0].stratifier?[2].stratum?[1].population?[2].count, 0)
		XCTAssertEqual(inst.group?[0].stratifier?[2].stratum?[1].population?[3].code?.coding?[0].code, "denominator-exclusion")
		XCTAssertEqual(inst.group?[0].stratifier?[2].stratum?[1].population?[3].count, 0)
		XCTAssertEqual(inst.group?[0].stratifier?[2].stratum?[1].value?.text, "female")
		XCTAssertEqual(inst.group?[0].stratifier?[2].stratum?[2].population?[0].code?.coding?[0].code, "initial-population")
		XCTAssertEqual(inst.group?[0].stratifier?[2].stratum?[2].population?[0].count, 0)
		XCTAssertEqual(inst.group?[0].stratifier?[2].stratum?[2].population?[1].code?.coding?[0].code, "numerator")
		XCTAssertEqual(inst.group?[0].stratifier?[2].stratum?[2].population?[1].count, 0)
		XCTAssertEqual(inst.group?[0].stratifier?[2].stratum?[2].population?[2].code?.coding?[0].code, "denominator")
		XCTAssertEqual(inst.group?[0].stratifier?[2].stratum?[2].population?[2].count, 0)
		XCTAssertEqual(inst.group?[0].stratifier?[2].stratum?[2].population?[3].code?.coding?[0].code, "denominator-exclusion")
		XCTAssertEqual(inst.group?[0].stratifier?[2].stratum?[2].population?[3].count, 0)
		XCTAssertEqual(inst.group?[0].stratifier?[2].stratum?[2].value?.text, "other")
		XCTAssertEqual(inst.group?[0].stratifier?[2].stratum?[3].population?[0].code?.coding?[0].code, "initial-population")
		XCTAssertEqual(inst.group?[0].stratifier?[2].stratum?[3].population?[0].count, 0)
		XCTAssertEqual(inst.group?[0].stratifier?[2].stratum?[3].population?[1].code?.coding?[0].code, "numerator")
		XCTAssertEqual(inst.group?[0].stratifier?[2].stratum?[3].population?[1].count, 0)
		XCTAssertEqual(inst.group?[0].stratifier?[2].stratum?[3].population?[2].code?.coding?[0].code, "denominator")
		XCTAssertEqual(inst.group?[0].stratifier?[2].stratum?[3].population?[2].count, 0)
		XCTAssertEqual(inst.group?[0].stratifier?[2].stratum?[3].population?[3].code?.coding?[0].code, "denominator-exclusion")
		XCTAssertEqual(inst.group?[0].stratifier?[2].stratum?[3].population?[3].count, 0)
		XCTAssertEqual(inst.group?[0].stratifier?[2].stratum?[3].value?.text, "unknown")
		XCTAssertEqual(inst.id, "measurereport-cms146-cat1-example")
		XCTAssertEqual(inst.identifier?[0].value, "measurereport-cms146-cat1-example-2017-03-13")
		XCTAssertEqual(inst.measure?.absoluteString, "Measure/CMS146")
		XCTAssertEqual(inst.meta?.tag?[0].code, "HTEST")
		XCTAssertEqual(inst.meta?.tag?[0].display, "test health data")
		XCTAssertEqual(inst.meta?.tag?[0].system?.absoluteString, "http://terminology.hl7.org/CodeSystem/v3-ActReason")
		XCTAssertEqual(inst.period?.end?.description, "2014-03-31")
		XCTAssertEqual(inst.period?.start?.description, "2014-01-01")
		XCTAssertEqual(inst.reporter?.reference, "#reporter")
		XCTAssertEqual(inst.status, MeasureReportStatus(rawValue: "complete")!)
		XCTAssertEqual(inst.subject?.reference, "Patient/123")
		XCTAssertEqual(inst.text?.status, NarrativeStatus(rawValue: "generated")!)
		XCTAssertEqual(inst.type, MeasureReportType(rawValue: "individual")!)
		
		return inst
	}
	
	func testMeasureReport2() {
		do {
			let instance = try runMeasureReport2()
			try runMeasureReport2(instance.asJSON())
		}
		catch let error {
			XCTAssertTrue(false, "Must instantiate and test MeasureReport successfully, but threw:\n---\n\(error)\n---")
		}
	}
	
	@discardableResult
	func runMeasureReport2(_ json: FHIRJSON? = nil) throws -> SwiftFHIRMeasureReport {
		let inst = (nil != json) ? try instantiateFrom(json: json!) : try instantiateFrom(filename: "measurereport-cms146-cat2-example.json")
		
		XCTAssertEqual(inst.contained?[0].id, "reporter")
		XCTAssertEqual(inst.date?.description, "2014-04-01")
		XCTAssertEqual(inst.group?[0].id, "CMS146-group-1")
		XCTAssertEqual(inst.group?[0].population?[0].code?.coding?[0].code, "initial-population")
		XCTAssertEqual(inst.group?[0].population?[0].count, 500)
		XCTAssertEqual(inst.group?[0].population?[0].subjectResults?.reference, "List/CMS146-initial-population")
		XCTAssertEqual(inst.group?[0].population?[1].code?.coding?[0].code, "numerator")
		XCTAssertEqual(inst.group?[0].population?[1].count, 200)
		XCTAssertEqual(inst.group?[0].population?[1].subjectResults?.reference, "List/CMS146-numerator")
		XCTAssertEqual(inst.group?[0].population?[2].code?.coding?[0].code, "denominator")
		XCTAssertEqual(inst.group?[0].population?[2].count, 500)
		XCTAssertEqual(inst.group?[0].population?[2].subjectResults?.reference, "List/CMS146-denominator")
		XCTAssertEqual(inst.group?[0].population?[3].code?.coding?[0].code, "denominator-exclusion")
		XCTAssertEqual(inst.group?[0].population?[3].count, 100)
		XCTAssertEqual(inst.group?[0].population?[3].subjectResults?.reference, "List/CMS146-denominator-exclusions")
		XCTAssertEqual(inst.group?[0].stratifier?[0].code?[0].text, "stratifier-ages-up-to-9")
		XCTAssertEqual(inst.group?[0].stratifier?[0].stratum?[0].population?[0].code?.coding?[0].code, "initial-population")
		XCTAssertEqual(inst.group?[0].stratifier?[0].stratum?[0].population?[0].count, 250)
		XCTAssertEqual(inst.group?[0].stratifier?[0].stratum?[0].population?[0].subjectResults?.reference, "List/CMS146-stratifier-ages-up-to-9-true-initial-population")
		XCTAssertEqual(inst.group?[0].stratifier?[0].stratum?[0].population?[1].code?.coding?[0].code, "numerator")
		XCTAssertEqual(inst.group?[0].stratifier?[0].stratum?[0].population?[1].count, 100)
		XCTAssertEqual(inst.group?[0].stratifier?[0].stratum?[0].population?[1].subjectResults?.reference, "List/CMS146-stratifier-ages-up-to-9-true-numerator")
		XCTAssertEqual(inst.group?[0].stratifier?[0].stratum?[0].population?[2].code?.coding?[0].code, "denominator")
		XCTAssertEqual(inst.group?[0].stratifier?[0].stratum?[0].population?[2].count, 250)
		XCTAssertEqual(inst.group?[0].stratifier?[0].stratum?[0].population?[2].subjectResults?.reference, "List/CMS146-stratifier-ages-up-to-9-true-denominator")
		XCTAssertEqual(inst.group?[0].stratifier?[0].stratum?[0].population?[3].code?.coding?[0].code, "denominator-exclusion")
		XCTAssertEqual(inst.group?[0].stratifier?[0].stratum?[0].population?[3].count, 50)
		XCTAssertEqual(inst.group?[0].stratifier?[0].stratum?[0].population?[3].subjectResults?.reference, "List/CMS146-stratifier-ages-up-to-9-true-denominator-exclusions")
		XCTAssertEqual(inst.group?[0].stratifier?[0].stratum?[0].value?.text, "true")
		XCTAssertEqual(inst.group?[0].stratifier?[0].stratum?[1].population?[0].code?.coding?[0].code, "initial-population")
		XCTAssertEqual(inst.group?[0].stratifier?[0].stratum?[1].population?[0].count, 250)
		XCTAssertEqual(inst.group?[0].stratifier?[0].stratum?[1].population?[0].subjectResults?.reference, "List/CMS146-stratifier-ages-up-to-9-false-initial-population")
		XCTAssertEqual(inst.group?[0].stratifier?[0].stratum?[1].population?[1].code?.coding?[0].code, "numerator")
		XCTAssertEqual(inst.group?[0].stratifier?[0].stratum?[1].population?[1].count, 100)
		XCTAssertEqual(inst.group?[0].stratifier?[0].stratum?[1].population?[1].subjectResults?.reference, "List/CMS146-stratifier-ages-up-to-9-false-numerator")
		XCTAssertEqual(inst.group?[0].stratifier?[0].stratum?[1].population?[2].code?.coding?[0].code, "denominator")
		XCTAssertEqual(inst.group?[0].stratifier?[0].stratum?[1].population?[2].count, 250)
		XCTAssertEqual(inst.group?[0].stratifier?[0].stratum?[1].population?[2].subjectResults?.reference, "List/CMS146-stratifier-ages-up-to-9-false-denominator")
		XCTAssertEqual(inst.group?[0].stratifier?[0].stratum?[1].population?[3].code?.coding?[0].code, "denominator-exclusion")
		XCTAssertEqual(inst.group?[0].stratifier?[0].stratum?[1].population?[3].count, 50)
		XCTAssertEqual(inst.group?[0].stratifier?[0].stratum?[1].population?[3].subjectResults?.reference, "List/CMS146-stratifier-ages-up-to-9-false-denominator-exclusions")
		XCTAssertEqual(inst.group?[0].stratifier?[0].stratum?[1].value?.text, "false")
		XCTAssertEqual(inst.group?[0].stratifier?[1].code?[0].text, "stratifier-ages-10-plus")
		XCTAssertEqual(inst.group?[0].stratifier?[1].stratum?[0].population?[0].code?.coding?[0].code, "initial-population")
		XCTAssertEqual(inst.group?[0].stratifier?[1].stratum?[0].population?[0].count, 250)
		XCTAssertEqual(inst.group?[0].stratifier?[1].stratum?[0].population?[0].subjectResults?.reference, "List/CMS146-stratifier-ages-10-plus-true-initial-population")
		XCTAssertEqual(inst.group?[0].stratifier?[1].stratum?[0].population?[1].code?.coding?[0].code, "numerator")
		XCTAssertEqual(inst.group?[0].stratifier?[1].stratum?[0].population?[1].count, 100)
		XCTAssertEqual(inst.group?[0].stratifier?[1].stratum?[0].population?[1].subjectResults?.reference, "List/CMS146-stratifier-ages-10-plus-true-numerator")
		XCTAssertEqual(inst.group?[0].stratifier?[1].stratum?[0].population?[2].code?.coding?[0].code, "denominator")
		XCTAssertEqual(inst.group?[0].stratifier?[1].stratum?[0].population?[2].count, 250)
		XCTAssertEqual(inst.group?[0].stratifier?[1].stratum?[0].population?[2].subjectResults?.reference, "List/CMS146-stratifier-ages-10-plus-true-denominator")
		XCTAssertEqual(inst.group?[0].stratifier?[1].stratum?[0].population?[3].code?.coding?[0].code, "denominator-exclusion")
		XCTAssertEqual(inst.group?[0].stratifier?[1].stratum?[0].population?[3].count, 50)
		XCTAssertEqual(inst.group?[0].stratifier?[1].stratum?[0].population?[3].subjectResults?.reference, "List/CMS146-stratifier-ages-10-plus-true-denominator-exclusions")
		XCTAssertEqual(inst.group?[0].stratifier?[1].stratum?[0].value?.text, "true")
		XCTAssertEqual(inst.group?[0].stratifier?[1].stratum?[1].population?[0].code?.coding?[0].code, "initial-population")
		XCTAssertEqual(inst.group?[0].stratifier?[1].stratum?[1].population?[0].count, 250)
		XCTAssertEqual(inst.group?[0].stratifier?[1].stratum?[1].population?[0].subjectResults?.reference, "List/CMS146-stratifier-ages-10-plus-false-initial-population")
		XCTAssertEqual(inst.group?[0].stratifier?[1].stratum?[1].population?[1].code?.coding?[0].code, "numerator")
		XCTAssertEqual(inst.group?[0].stratifier?[1].stratum?[1].population?[1].count, 100)
		XCTAssertEqual(inst.group?[0].stratifier?[1].stratum?[1].population?[1].subjectResults?.reference, "List/CMS146-stratifier-ages-10-plus-false-numerator")
		XCTAssertEqual(inst.group?[0].stratifier?[1].stratum?[1].population?[2].code?.coding?[0].code, "denominator")
		XCTAssertEqual(inst.group?[0].stratifier?[1].stratum?[1].population?[2].count, 250)
		XCTAssertEqual(inst.group?[0].stratifier?[1].stratum?[1].population?[2].subjectResults?.reference, "List/CMS146-stratifier-ages-10-plus-false-denominator")
		XCTAssertEqual(inst.group?[0].stratifier?[1].stratum?[1].population?[3].code?.coding?[0].code, "denominator-exclusion")
		XCTAssertEqual(inst.group?[0].stratifier?[1].stratum?[1].population?[3].count, 50)
		XCTAssertEqual(inst.group?[0].stratifier?[1].stratum?[1].population?[3].subjectResults?.reference, "List/CMS146-stratifier-ages-10-plus-false-denominator-exclusions")
		XCTAssertEqual(inst.group?[0].stratifier?[1].stratum?[1].value?.text, "false")
		XCTAssertEqual(inst.group?[0].stratifier?[2].code?[0].text, "stratifier-gender")
		XCTAssertEqual(inst.group?[0].stratifier?[2].stratum?[0].population?[0].code?.coding?[0].code, "initial-population")
		XCTAssertEqual(inst.group?[0].stratifier?[2].stratum?[0].population?[0].count, 250)
		XCTAssertEqual(inst.group?[0].stratifier?[2].stratum?[0].population?[0].subjectResults?.reference, "List/CMS146-stratifier-gender-male-initial-population")
		XCTAssertEqual(inst.group?[0].stratifier?[2].stratum?[0].population?[1].code?.coding?[0].code, "numerator")
		XCTAssertEqual(inst.group?[0].stratifier?[2].stratum?[0].population?[1].count, 100)
		XCTAssertEqual(inst.group?[0].stratifier?[2].stratum?[0].population?[1].subjectResults?.reference, "List/CMS146-stratifier-gender-male-numerator")
		XCTAssertEqual(inst.group?[0].stratifier?[2].stratum?[0].population?[2].code?.coding?[0].code, "denominator")
		XCTAssertEqual(inst.group?[0].stratifier?[2].stratum?[0].population?[2].count, 250)
		XCTAssertEqual(inst.group?[0].stratifier?[2].stratum?[0].population?[2].subjectResults?.reference, "List/CMS146-stratifier-gender-male-denominator")
		XCTAssertEqual(inst.group?[0].stratifier?[2].stratum?[0].population?[3].code?.coding?[0].code, "denominator-exclusion")
		XCTAssertEqual(inst.group?[0].stratifier?[2].stratum?[0].population?[3].count, 50)
		XCTAssertEqual(inst.group?[0].stratifier?[2].stratum?[0].population?[3].subjectResults?.reference, "List/CMS146-stratifier-gender-male-denominator-exclusions")
		XCTAssertEqual(inst.group?[0].stratifier?[2].stratum?[0].value?.text, "male")
		XCTAssertEqual(inst.group?[0].stratifier?[2].stratum?[1].population?[0].code?.coding?[0].code, "initial-population")
		XCTAssertEqual(inst.group?[0].stratifier?[2].stratum?[1].population?[0].count, 250)
		XCTAssertEqual(inst.group?[0].stratifier?[2].stratum?[1].population?[0].subjectResults?.reference, "List/CMS146-stratifier-gender-female-initial-population")
		XCTAssertEqual(inst.group?[0].stratifier?[2].stratum?[1].population?[1].code?.coding?[0].code, "numerator")
		XCTAssertEqual(inst.group?[0].stratifier?[2].stratum?[1].population?[1].count, 100)
		XCTAssertEqual(inst.group?[0].stratifier?[2].stratum?[1].population?[1].subjectResults?.reference, "List/CMS146-stratifier-gender-female-numerator")
		XCTAssertEqual(inst.group?[0].stratifier?[2].stratum?[1].population?[2].code?.coding?[0].code, "denominator")
		XCTAssertEqual(inst.group?[0].stratifier?[2].stratum?[1].population?[2].count, 250)
		XCTAssertEqual(inst.group?[0].stratifier?[2].stratum?[1].population?[2].subjectResults?.reference, "List/CMS146-stratifier-gender-female-denominator")
		XCTAssertEqual(inst.group?[0].stratifier?[2].stratum?[1].population?[3].code?.coding?[0].code, "denominator-exclusion")
		XCTAssertEqual(inst.group?[0].stratifier?[2].stratum?[1].population?[3].count, 50)
		XCTAssertEqual(inst.group?[0].stratifier?[2].stratum?[1].population?[3].subjectResults?.reference, "List/CMS146-stratifier-gender-female-denominator-exclusions")
		XCTAssertEqual(inst.group?[0].stratifier?[2].stratum?[1].value?.text, "female")
		XCTAssertEqual(inst.group?[0].stratifier?[2].stratum?[2].population?[0].code?.coding?[0].code, "initial-population")
		XCTAssertEqual(inst.group?[0].stratifier?[2].stratum?[2].population?[0].count, 0)
		XCTAssertEqual(inst.group?[0].stratifier?[2].stratum?[2].population?[0].subjectResults?.reference, "List/CMS146-stratifier-gender-other-initial-population")
		XCTAssertEqual(inst.group?[0].stratifier?[2].stratum?[2].population?[1].code?.coding?[0].code, "numerator")
		XCTAssertEqual(inst.group?[0].stratifier?[2].stratum?[2].population?[1].count, 0)
		XCTAssertEqual(inst.group?[0].stratifier?[2].stratum?[2].population?[1].subjectResults?.reference, "List/CMS146-stratifier-gender-other-numerator")
		XCTAssertEqual(inst.group?[0].stratifier?[2].stratum?[2].population?[2].code?.coding?[0].code, "denominator")
		XCTAssertEqual(inst.group?[0].stratifier?[2].stratum?[2].population?[2].count, 0)
		XCTAssertEqual(inst.group?[0].stratifier?[2].stratum?[2].population?[2].subjectResults?.reference, "List/CMS146-stratifier-gender-other-denominator")
		XCTAssertEqual(inst.group?[0].stratifier?[2].stratum?[2].population?[3].code?.coding?[0].code, "denominator-exclusion")
		XCTAssertEqual(inst.group?[0].stratifier?[2].stratum?[2].population?[3].count, 0)
		XCTAssertEqual(inst.group?[0].stratifier?[2].stratum?[2].population?[3].subjectResults?.reference, "List/CMS146-stratifier-gender-other-denominator-exclusions")
		XCTAssertEqual(inst.group?[0].stratifier?[2].stratum?[2].value?.text, "other")
		XCTAssertEqual(inst.group?[0].stratifier?[2].stratum?[3].population?[0].code?.coding?[0].code, "initial-population")
		XCTAssertEqual(inst.group?[0].stratifier?[2].stratum?[3].population?[0].count, 0)
		XCTAssertEqual(inst.group?[0].stratifier?[2].stratum?[3].population?[0].subjectResults?.reference, "List/CMS146-stratifier-gender-unknown-initial-population")
		XCTAssertEqual(inst.group?[0].stratifier?[2].stratum?[3].population?[1].code?.coding?[0].code, "numerator")
		XCTAssertEqual(inst.group?[0].stratifier?[2].stratum?[3].population?[1].count, 0)
		XCTAssertEqual(inst.group?[0].stratifier?[2].stratum?[3].population?[1].subjectResults?.reference, "List/CMS146-stratifier-gender-unknown-numerator")
		XCTAssertEqual(inst.group?[0].stratifier?[2].stratum?[3].population?[2].code?.coding?[0].code, "denominator")
		XCTAssertEqual(inst.group?[0].stratifier?[2].stratum?[3].population?[2].count, 0)
		XCTAssertEqual(inst.group?[0].stratifier?[2].stratum?[3].population?[2].subjectResults?.reference, "List/CMS146-stratifier-gender-unknown-denominator")
		XCTAssertEqual(inst.group?[0].stratifier?[2].stratum?[3].population?[3].code?.coding?[0].code, "denominator-exclusions")
		XCTAssertEqual(inst.group?[0].stratifier?[2].stratum?[3].population?[3].count, 0)
		XCTAssertEqual(inst.group?[0].stratifier?[2].stratum?[3].population?[3].subjectResults?.reference, "List/CMS146-stratifier-gender-unknown-denominator-exclusions")
		XCTAssertEqual(inst.group?[0].stratifier?[2].stratum?[3].value?.text, "unknown")
		XCTAssertEqual(inst.id, "measurereport-cms146-cat2-example")
		XCTAssertEqual(inst.identifier?[0].value, "measurereport-cms146-cat2-example-2017-03-13")
		XCTAssertEqual(inst.measure?.absoluteString, "Measure/CMS146")
		XCTAssertEqual(inst.meta?.tag?[0].code, "HTEST")
		XCTAssertEqual(inst.meta?.tag?[0].display, "test health data")
		XCTAssertEqual(inst.meta?.tag?[0].system?.absoluteString, "http://terminology.hl7.org/CodeSystem/v3-ActReason")
		XCTAssertEqual(inst.period?.end?.description, "2014-03-31")
		XCTAssertEqual(inst.period?.start?.description, "2014-01-01")
		XCTAssertEqual(inst.reporter?.reference, "#reporter")
		XCTAssertEqual(inst.status, MeasureReportStatus(rawValue: "complete")!)
		XCTAssertEqual(inst.text?.status, NarrativeStatus(rawValue: "generated")!)
		XCTAssertEqual(inst.type, MeasureReportType(rawValue: "subject-list")!)
		
		return inst
	}
	
	func testMeasureReport3() {
		do {
			let instance = try runMeasureReport3()
			try runMeasureReport3(instance.asJSON())
		}
		catch let error {
			XCTAssertTrue(false, "Must instantiate and test MeasureReport successfully, but threw:\n---\n\(error)\n---")
		}
	}
	
	@discardableResult
	func runMeasureReport3(_ json: FHIRJSON? = nil) throws -> SwiftFHIRMeasureReport {
		let inst = (nil != json) ? try instantiateFrom(json: json!) : try instantiateFrom(filename: "measurereport-cms146-cat3-example.json")
		
		XCTAssertEqual(inst.contained?[0].id, "reporter")
		XCTAssertEqual(inst.date?.description, "2014-04-01")
		XCTAssertEqual(inst.group?[0].id, "CMS146-group-1")
		XCTAssertEqual(inst.group?[0].population?[0].code?.coding?[0].code, "initial-population")
		XCTAssertEqual(inst.group?[0].population?[0].count, 500)
		XCTAssertEqual(inst.group?[0].population?[1].code?.coding?[0].code, "numerator")
		XCTAssertEqual(inst.group?[0].population?[1].count, 200)
		XCTAssertEqual(inst.group?[0].population?[2].code?.coding?[0].code, "denominator")
		XCTAssertEqual(inst.group?[0].population?[2].count, 500)
		XCTAssertEqual(inst.group?[0].population?[3].code?.coding?[0].code, "denominator-exclusion")
		XCTAssertEqual(inst.group?[0].population?[3].count, 100)
		XCTAssertEqual(inst.group?[0].stratifier?[0].code?[0].text, "stratifier-ages-up-to-9")
		XCTAssertEqual(inst.group?[0].stratifier?[0].stratum?[0].population?[0].code?.coding?[0].code, "initial-population")
		XCTAssertEqual(inst.group?[0].stratifier?[0].stratum?[0].population?[0].count, 250)
		XCTAssertEqual(inst.group?[0].stratifier?[0].stratum?[0].population?[1].code?.coding?[0].code, "numerator")
		XCTAssertEqual(inst.group?[0].stratifier?[0].stratum?[0].population?[1].count, 100)
		XCTAssertEqual(inst.group?[0].stratifier?[0].stratum?[0].population?[2].code?.coding?[0].code, "denominator")
		XCTAssertEqual(inst.group?[0].stratifier?[0].stratum?[0].population?[2].count, 250)
		XCTAssertEqual(inst.group?[0].stratifier?[0].stratum?[0].population?[3].code?.coding?[0].code, "denominator-exclusion")
		XCTAssertEqual(inst.group?[0].stratifier?[0].stratum?[0].population?[3].count, 50)
		XCTAssertEqual(inst.group?[0].stratifier?[0].stratum?[0].value?.text, "true")
		XCTAssertEqual(inst.group?[0].stratifier?[0].stratum?[1].population?[0].code?.coding?[0].code, "initial-population")
		XCTAssertEqual(inst.group?[0].stratifier?[0].stratum?[1].population?[0].count, 250)
		XCTAssertEqual(inst.group?[0].stratifier?[0].stratum?[1].population?[1].code?.coding?[0].code, "numerator")
		XCTAssertEqual(inst.group?[0].stratifier?[0].stratum?[1].population?[1].count, 100)
		XCTAssertEqual(inst.group?[0].stratifier?[0].stratum?[1].population?[2].code?.coding?[0].code, "denominator")
		XCTAssertEqual(inst.group?[0].stratifier?[0].stratum?[1].population?[2].count, 250)
		XCTAssertEqual(inst.group?[0].stratifier?[0].stratum?[1].population?[3].code?.coding?[0].code, "denominator-exclusion")
		XCTAssertEqual(inst.group?[0].stratifier?[0].stratum?[1].population?[3].count, 50)
		XCTAssertEqual(inst.group?[0].stratifier?[0].stratum?[1].value?.text, "false")
		XCTAssertEqual(inst.group?[0].stratifier?[1].code?[0].text, "stratifier-ages-10-plus")
		XCTAssertEqual(inst.group?[0].stratifier?[1].stratum?[0].population?[0].code?.coding?[0].code, "initial-population")
		XCTAssertEqual(inst.group?[0].stratifier?[1].stratum?[0].population?[0].count, 250)
		XCTAssertEqual(inst.group?[0].stratifier?[1].stratum?[0].population?[1].code?.coding?[0].code, "numerator")
		XCTAssertEqual(inst.group?[0].stratifier?[1].stratum?[0].population?[1].count, 100)
		XCTAssertEqual(inst.group?[0].stratifier?[1].stratum?[0].population?[2].code?.coding?[0].code, "denominator")
		XCTAssertEqual(inst.group?[0].stratifier?[1].stratum?[0].population?[2].count, 250)
		XCTAssertEqual(inst.group?[0].stratifier?[1].stratum?[0].population?[3].code?.coding?[0].code, "denominator-exclusion")
		XCTAssertEqual(inst.group?[0].stratifier?[1].stratum?[0].population?[3].count, 50)
		XCTAssertEqual(inst.group?[0].stratifier?[1].stratum?[0].value?.text, "true")
		XCTAssertEqual(inst.group?[0].stratifier?[1].stratum?[1].population?[0].code?.coding?[0].code, "initial-population")
		XCTAssertEqual(inst.group?[0].stratifier?[1].stratum?[1].population?[0].count, 250)
		XCTAssertEqual(inst.group?[0].stratifier?[1].stratum?[1].population?[1].code?.coding?[0].code, "numerator")
		XCTAssertEqual(inst.group?[0].stratifier?[1].stratum?[1].population?[1].count, 100)
		XCTAssertEqual(inst.group?[0].stratifier?[1].stratum?[1].population?[2].code?.coding?[0].code, "denominator")
		XCTAssertEqual(inst.group?[0].stratifier?[1].stratum?[1].population?[2].count, 250)
		XCTAssertEqual(inst.group?[0].stratifier?[1].stratum?[1].population?[3].code?.coding?[0].code, "denominator-exclusion")
		XCTAssertEqual(inst.group?[0].stratifier?[1].stratum?[1].population?[3].count, 50)
		XCTAssertEqual(inst.group?[0].stratifier?[1].stratum?[1].value?.text, "false")
		XCTAssertEqual(inst.group?[0].stratifier?[2].code?[0].text, "stratifier-gender")
		XCTAssertEqual(inst.group?[0].stratifier?[2].stratum?[0].population?[0].code?.coding?[0].code, "initial-population")
		XCTAssertEqual(inst.group?[0].stratifier?[2].stratum?[0].population?[0].count, 250)
		XCTAssertEqual(inst.group?[0].stratifier?[2].stratum?[0].population?[1].code?.coding?[0].code, "numerator")
		XCTAssertEqual(inst.group?[0].stratifier?[2].stratum?[0].population?[1].count, 100)
		XCTAssertEqual(inst.group?[0].stratifier?[2].stratum?[0].population?[2].code?.coding?[0].code, "denominator")
		XCTAssertEqual(inst.group?[0].stratifier?[2].stratum?[0].population?[2].count, 250)
		XCTAssertEqual(inst.group?[0].stratifier?[2].stratum?[0].population?[3].code?.coding?[0].code, "denominator-exclusion")
		XCTAssertEqual(inst.group?[0].stratifier?[2].stratum?[0].population?[3].count, 50)
		XCTAssertEqual(inst.group?[0].stratifier?[2].stratum?[0].value?.text, "male")
		XCTAssertEqual(inst.group?[0].stratifier?[2].stratum?[1].population?[0].code?.coding?[0].code, "initial-population")
		XCTAssertEqual(inst.group?[0].stratifier?[2].stratum?[1].population?[0].count, 250)
		XCTAssertEqual(inst.group?[0].stratifier?[2].stratum?[1].population?[1].code?.coding?[0].code, "numerator")
		XCTAssertEqual(inst.group?[0].stratifier?[2].stratum?[1].population?[1].count, 100)
		XCTAssertEqual(inst.group?[0].stratifier?[2].stratum?[1].population?[2].code?.coding?[0].code, "denominator")
		XCTAssertEqual(inst.group?[0].stratifier?[2].stratum?[1].population?[2].count, 250)
		XCTAssertEqual(inst.group?[0].stratifier?[2].stratum?[1].population?[3].code?.coding?[0].code, "denominator-exclusion")
		XCTAssertEqual(inst.group?[0].stratifier?[2].stratum?[1].population?[3].count, 50)
		XCTAssertEqual(inst.group?[0].stratifier?[2].stratum?[1].value?.text, "female")
		XCTAssertEqual(inst.group?[0].stratifier?[2].stratum?[2].population?[0].code?.coding?[0].code, "initial-population")
		XCTAssertEqual(inst.group?[0].stratifier?[2].stratum?[2].population?[0].count, 0)
		XCTAssertEqual(inst.group?[0].stratifier?[2].stratum?[2].population?[1].code?.coding?[0].code, "numerator")
		XCTAssertEqual(inst.group?[0].stratifier?[2].stratum?[2].population?[1].count, 0)
		XCTAssertEqual(inst.group?[0].stratifier?[2].stratum?[2].population?[2].code?.coding?[0].code, "denominator")
		XCTAssertEqual(inst.group?[0].stratifier?[2].stratum?[2].population?[2].count, 0)
		XCTAssertEqual(inst.group?[0].stratifier?[2].stratum?[2].population?[3].code?.coding?[0].code, "denominator-exclusion")
		XCTAssertEqual(inst.group?[0].stratifier?[2].stratum?[2].population?[3].count, 0)
		XCTAssertEqual(inst.group?[0].stratifier?[2].stratum?[2].value?.text, "other")
		XCTAssertEqual(inst.group?[0].stratifier?[2].stratum?[3].population?[0].code?.coding?[0].code, "initial-population")
		XCTAssertEqual(inst.group?[0].stratifier?[2].stratum?[3].population?[0].count, 0)
		XCTAssertEqual(inst.group?[0].stratifier?[2].stratum?[3].population?[1].code?.coding?[0].code, "numerator")
		XCTAssertEqual(inst.group?[0].stratifier?[2].stratum?[3].population?[1].count, 0)
		XCTAssertEqual(inst.group?[0].stratifier?[2].stratum?[3].population?[2].code?.coding?[0].code, "denominator")
		XCTAssertEqual(inst.group?[0].stratifier?[2].stratum?[3].population?[2].count, 0)
		XCTAssertEqual(inst.group?[0].stratifier?[2].stratum?[3].population?[3].code?.coding?[0].code, "denominator-exclusion")
		XCTAssertEqual(inst.group?[0].stratifier?[2].stratum?[3].population?[3].count, 0)
		XCTAssertEqual(inst.group?[0].stratifier?[2].stratum?[3].value?.text, "unknown")
		XCTAssertEqual(inst.id, "measurereport-cms146-cat3-example")
		XCTAssertEqual(inst.identifier?[0].value, "measurereport-cms146-cat3-example-2017-03-13")
		XCTAssertEqual(inst.measure?.absoluteString, "Measure/CMS146")
		XCTAssertEqual(inst.meta?.tag?[0].code, "HTEST")
		XCTAssertEqual(inst.meta?.tag?[0].display, "test health data")
		XCTAssertEqual(inst.meta?.tag?[0].system?.absoluteString, "http://terminology.hl7.org/CodeSystem/v3-ActReason")
		XCTAssertEqual(inst.period?.end?.description, "2014-03-31")
		XCTAssertEqual(inst.period?.start?.description, "2014-01-01")
		XCTAssertEqual(inst.reporter?.reference, "#reporter")
		XCTAssertEqual(inst.status, MeasureReportStatus(rawValue: "complete")!)
		XCTAssertEqual(inst.text?.status, NarrativeStatus(rawValue: "generated")!)
		XCTAssertEqual(inst.type, MeasureReportType(rawValue: "summary")!)
		
		return inst
	}
}
