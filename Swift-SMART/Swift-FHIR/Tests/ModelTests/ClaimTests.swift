//
//  ClaimTests.swift
//  SwiftFHIR
//
//  Generated from FHIR 4.0.0-a53ec6ee1b on 2019-03-01.
//  2019, SMART Health IT.
//

import XCTest
#if !NO_MODEL_IMPORT
import Models
typealias SwiftFHIRClaim = Models.Claim
#else
import SwiftFHIR
typealias SwiftFHIRClaim = SwiftFHIR.Claim
#endif


class ClaimTests: XCTestCase {
	
	func instantiateFrom(filename: String) throws -> SwiftFHIRClaim {
		return try instantiateFrom(json: try readJSONFile(filename))
	}
	
	func instantiateFrom(json: FHIRJSON) throws -> SwiftFHIRClaim {
		return try SwiftFHIRClaim(json: json)
	}
	
	func testClaim1() {
		do {
			let instance = try runClaim1()
			try runClaim1(instance.asJSON())
		}
		catch let error {
			XCTAssertTrue(false, "Must instantiate and test Claim successfully, but threw:\n---\n\(error)\n---")
		}
	}
	
	@discardableResult
	func runClaim1(_ json: FHIRJSON? = nil) throws -> SwiftFHIRClaim {
		let inst = (nil != json) ? try instantiateFrom(json: json!) : try instantiateFrom(filename: "claim-example-institutional-rich.json")
		
		XCTAssertEqual(inst.accident?.date?.description, "2014-07-09")
		XCTAssertEqual(inst.accident?.locationAddress?.text, "Grouse Mountain Ski Hill")
		XCTAssertEqual(inst.accident?.type?.coding?[0].code, "SPT")
		XCTAssertEqual(inst.accident?.type?.coding?[0].display, "Sporting Accident")
		XCTAssertEqual(inst.accident?.type?.coding?[0].system?.absoluteString, "http://terminology.hl7.org/CodeSystem/v3-ActIncidentCode")
		XCTAssertEqual(inst.billablePeriod?.end?.description, "2014-08-16")
		XCTAssertEqual(inst.billablePeriod?.start?.description, "2014-08-15")
		XCTAssertEqual(inst.careTeam?[0].provider?.reference, "Practitioner/example")
		XCTAssertEqual(inst.careTeam?[0].qualification?.coding?[0].code, "physician")
		XCTAssertEqual(inst.careTeam?[0].qualification?.coding?[0].system?.absoluteString, "http://example.org/fhir/CodeSystem/provider-qualification")
		XCTAssertEqual(inst.careTeam?[0].responsible, true)
		XCTAssertEqual(inst.careTeam?[0].role?.coding?[0].code, "primary")
		XCTAssertEqual(inst.careTeam?[0].role?.coding?[0].system?.absoluteString, "http://example.org/fhir/CodeSystem/claim-careteamrole")
		XCTAssertEqual(inst.careTeam?[0].sequence, 1)
		XCTAssertEqual(inst.created?.description, "2014-08-16")
		XCTAssertEqual(inst.diagnosis?[0].diagnosisCodeableConcept?.coding?[0].code, "654456")
		XCTAssertEqual(inst.diagnosis?[0].packageCode?.coding?[0].code, "400")
		XCTAssertEqual(inst.diagnosis?[0].packageCode?.coding?[0].display, "Head trauma - concussion")
		XCTAssertEqual(inst.diagnosis?[0].packageCode?.coding?[0].system?.absoluteString, "http://terminology.hl7.org/CodeSystem/ex-diagnosisrelatedgroup")
		XCTAssertEqual(inst.diagnosis?[0].sequence, 1)
		XCTAssertEqual(inst.diagnosis?[0].type?[0].coding?[0].code, "admitting")
		XCTAssertEqual(inst.diagnosis?[0].type?[0].coding?[0].system?.absoluteString, "http://terminology.hl7.org/CodeSystem/ex-diagnosistype")
		XCTAssertEqual(inst.enterer?.identifier?.system?.absoluteString, "http://jurisdiction.org/facilities/HOSP1234/users")
		XCTAssertEqual(inst.enterer?.identifier?.value, "UC1234")
		XCTAssertEqual(inst.facility?.identifier?.system?.absoluteString, "http://jurisdiction.org/facilities")
		XCTAssertEqual(inst.facility?.identifier?.value, "HOSP1234")
		XCTAssertEqual(inst.id, "960151")
		XCTAssertEqual(inst.identifier?[0].system?.absoluteString, "http://happyhospital.com/claim")
		XCTAssertEqual(inst.identifier?[0].value, "96123451")
		XCTAssertEqual(inst.insurance?[0].businessArrangement, "BA987123")
		XCTAssertEqual(inst.insurance?[0].coverage?.reference, "Coverage/9876B1")
		XCTAssertEqual(inst.insurance?[0].focal, true)
		XCTAssertEqual(inst.insurance?[0].preAuthRef?[0], "PA2014G56473")
		XCTAssertEqual(inst.insurance?[0].sequence, 1)
		XCTAssertEqual(inst.insurer?.reference, "Organization/2")
		XCTAssertEqual(inst.item?[0].careTeamSequence?[0], 1)
		XCTAssertEqual(inst.item?[0].net?.currency, "USD")
		XCTAssertEqual(inst.item?[0].net?.value, "125.0")
		XCTAssertEqual(inst.item?[0].productOrService?.coding?[0].code, "exam")
		XCTAssertEqual(inst.item?[0].productOrService?.coding?[0].system?.absoluteString, "http://hl7.org/fhir/ex-serviceproduct")
		XCTAssertEqual(inst.item?[0].sequence, 1)
		XCTAssertEqual(inst.item?[0].servicedDate?.description, "2014-08-16")
		XCTAssertEqual(inst.item?[0].unitPrice?.currency, "USD")
		XCTAssertEqual(inst.item?[0].unitPrice?.value, "125.0")
		XCTAssertEqual(inst.meta?.tag?[0].code, "HTEST")
		XCTAssertEqual(inst.meta?.tag?[0].display, "test health data")
		XCTAssertEqual(inst.meta?.tag?[0].system?.absoluteString, "http://terminology.hl7.org/CodeSystem/v3-ActReason")
		XCTAssertEqual(inst.patient?.reference, "Patient/1")
		XCTAssertEqual(inst.payee?.type?.coding?[0].code, "provider")
		XCTAssertEqual(inst.priority?.coding?[0].code, "normal")
		XCTAssertEqual(inst.provider?.identifier?.system?.absoluteString, "http://npid.org/providerid")
		XCTAssertEqual(inst.provider?.identifier?.value, "NJ12345")
		XCTAssertEqual(inst.status, FinancialResourceStatusCodes(rawValue: "active")!)
		XCTAssertEqual(inst.supportingInfo?[0].category?.coding?[0].code, "employmentimpacted")
		XCTAssertEqual(inst.supportingInfo?[0].category?.coding?[0].system?.absoluteString, "http://terminology.hl7.org/CodeSystem/claiminformationcategory")
		XCTAssertEqual(inst.supportingInfo?[0].sequence, 1)
		XCTAssertEqual(inst.supportingInfo?[0].timingPeriod?.end?.description, "2014-08-16")
		XCTAssertEqual(inst.supportingInfo?[0].timingPeriod?.start?.description, "2014-08-16")
		XCTAssertEqual(inst.supportingInfo?[1].category?.coding?[0].code, "hospitalized")
		XCTAssertEqual(inst.supportingInfo?[1].category?.coding?[0].system?.absoluteString, "http://terminology.hl7.org/CodeSystem/claiminformationcategory")
		XCTAssertEqual(inst.supportingInfo?[1].sequence, 2)
		XCTAssertEqual(inst.supportingInfo?[1].timingPeriod?.end?.description, "2014-08-16")
		XCTAssertEqual(inst.supportingInfo?[1].timingPeriod?.start?.description, "2014-08-15")
		XCTAssertEqual(inst.text?.div, "<div xmlns=\"http://www.w3.org/1999/xhtml\">A human-readable rendering of the Claim</div>")
		XCTAssertEqual(inst.text?.status, NarrativeStatus(rawValue: "generated")!)
		XCTAssertEqual(inst.total?.currency, "USD")
		XCTAssertEqual(inst.total?.value, "125.0")
		XCTAssertEqual(inst.type?.coding?[0].code, "institutional")
		XCTAssertEqual(inst.type?.coding?[0].system?.absoluteString, "http://terminology.hl7.org/CodeSystem/claim-type")
		XCTAssertEqual(inst.use, Use(rawValue: "claim")!)
		
		return inst
	}
	
	func testClaim2() {
		do {
			let instance = try runClaim2()
			try runClaim2(instance.asJSON())
		}
		catch let error {
			XCTAssertTrue(false, "Must instantiate and test Claim successfully, but threw:\n---\n\(error)\n---")
		}
	}
	
	@discardableResult
	func runClaim2(_ json: FHIRJSON? = nil) throws -> SwiftFHIRClaim {
		let inst = (nil != json) ? try instantiateFrom(json: json!) : try instantiateFrom(filename: "claim-example-professional.json")
		
		XCTAssertEqual(inst.careTeam?[0].provider?.reference, "Practitioner/example")
		XCTAssertEqual(inst.careTeam?[0].sequence, 1)
		XCTAssertEqual(inst.created?.description, "2014-08-16")
		XCTAssertEqual(inst.diagnosis?[0].diagnosisCodeableConcept?.coding?[0].code, "654456")
		XCTAssertEqual(inst.diagnosis?[0].sequence, 1)
		XCTAssertEqual(inst.id, "860150")
		XCTAssertEqual(inst.identifier?[0].system?.absoluteString, "http://happypdocs.com/claim")
		XCTAssertEqual(inst.identifier?[0].value, "8612345")
		XCTAssertEqual(inst.insurance?[0].coverage?.reference, "Coverage/9876B1")
		XCTAssertEqual(inst.insurance?[0].focal, true)
		XCTAssertEqual(inst.insurance?[0].sequence, 1)
		XCTAssertEqual(inst.insurer?.reference, "Organization/2")
		XCTAssertEqual(inst.item?[0].careTeamSequence?[0], 1)
		XCTAssertEqual(inst.item?[0].net?.currency, "USD")
		XCTAssertEqual(inst.item?[0].net?.value, "75.0")
		XCTAssertEqual(inst.item?[0].productOrService?.coding?[0].code, "exam")
		XCTAssertEqual(inst.item?[0].productOrService?.coding?[0].system?.absoluteString, "http://hl7.org/fhir/ex-serviceproduct")
		XCTAssertEqual(inst.item?[0].sequence, 1)
		XCTAssertEqual(inst.item?[0].servicedDate?.description, "2014-08-16")
		XCTAssertEqual(inst.item?[0].unitPrice?.currency, "USD")
		XCTAssertEqual(inst.item?[0].unitPrice?.value, "75.0")
		XCTAssertEqual(inst.meta?.tag?[0].code, "HTEST")
		XCTAssertEqual(inst.meta?.tag?[0].display, "test health data")
		XCTAssertEqual(inst.meta?.tag?[0].system?.absoluteString, "http://terminology.hl7.org/CodeSystem/v3-ActReason")
		XCTAssertEqual(inst.patient?.reference, "Patient/1")
		XCTAssertEqual(inst.payee?.type?.coding?[0].code, "provider")
		XCTAssertEqual(inst.priority?.coding?[0].code, "normal")
		XCTAssertEqual(inst.provider?.reference, "Organization/1")
		XCTAssertEqual(inst.status, FinancialResourceStatusCodes(rawValue: "active")!)
		XCTAssertEqual(inst.text?.div, "<div xmlns=\"http://www.w3.org/1999/xhtml\">A human-readable rendering of the Claim</div>")
		XCTAssertEqual(inst.text?.status, NarrativeStatus(rawValue: "generated")!)
		XCTAssertEqual(inst.type?.coding?[0].code, "professional")
		XCTAssertEqual(inst.type?.coding?[0].system?.absoluteString, "http://terminology.hl7.org/CodeSystem/claim-type")
		XCTAssertEqual(inst.use, Use(rawValue: "claim")!)
		
		return inst
	}
	
	func testClaim3() {
		do {
			let instance = try runClaim3()
			try runClaim3(instance.asJSON())
		}
		catch let error {
			XCTAssertTrue(false, "Must instantiate and test Claim successfully, but threw:\n---\n\(error)\n---")
		}
	}
	
	@discardableResult
	func runClaim3(_ json: FHIRJSON? = nil) throws -> SwiftFHIRClaim {
		let inst = (nil != json) ? try instantiateFrom(json: json!) : try instantiateFrom(filename: "claim-example.json")
		
		XCTAssertEqual(inst.careTeam?[0].provider?.reference, "Practitioner/example")
		XCTAssertEqual(inst.careTeam?[0].sequence, 1)
		XCTAssertEqual(inst.created?.description, "2014-08-16")
		XCTAssertEqual(inst.diagnosis?[0].diagnosisCodeableConcept?.coding?[0].code, "123456")
		XCTAssertEqual(inst.diagnosis?[0].sequence, 1)
		XCTAssertEqual(inst.id, "100150")
		XCTAssertEqual(inst.identifier?[0].system?.absoluteString, "http://happyvalley.com/claim")
		XCTAssertEqual(inst.identifier?[0].value, "12345")
		XCTAssertEqual(inst.insurance?[0].coverage?.reference, "Coverage/9876B1")
		XCTAssertEqual(inst.insurance?[0].focal, true)
		XCTAssertEqual(inst.insurance?[0].identifier?.system?.absoluteString, "http://happyvalley.com/claim")
		XCTAssertEqual(inst.insurance?[0].identifier?.value, "12345")
		XCTAssertEqual(inst.insurance?[0].sequence, 1)
		XCTAssertEqual(inst.insurer?.reference, "Organization/2")
		XCTAssertEqual(inst.item?[0].careTeamSequence?[0], 1)
		XCTAssertEqual(inst.item?[0].net?.currency, "USD")
		XCTAssertEqual(inst.item?[0].net?.value, "135.57")
		XCTAssertEqual(inst.item?[0].productOrService?.coding?[0].code, "1200")
		XCTAssertEqual(inst.item?[0].sequence, 1)
		XCTAssertEqual(inst.item?[0].servicedDate?.description, "2014-08-16")
		XCTAssertEqual(inst.item?[0].unitPrice?.currency, "USD")
		XCTAssertEqual(inst.item?[0].unitPrice?.value, "135.57")
		XCTAssertEqual(inst.meta?.tag?[0].code, "HTEST")
		XCTAssertEqual(inst.meta?.tag?[0].display, "test health data")
		XCTAssertEqual(inst.meta?.tag?[0].system?.absoluteString, "http://terminology.hl7.org/CodeSystem/v3-ActReason")
		XCTAssertEqual(inst.patient?.reference, "Patient/1")
		XCTAssertEqual(inst.payee?.type?.coding?[0].code, "provider")
		XCTAssertEqual(inst.priority?.coding?[0].code, "normal")
		XCTAssertEqual(inst.provider?.reference, "Organization/1")
		XCTAssertEqual(inst.status, FinancialResourceStatusCodes(rawValue: "active")!)
		XCTAssertEqual(inst.text?.div, "<div xmlns=\"http://www.w3.org/1999/xhtml\">A human-readable rendering of the Oral Health Claim</div>")
		XCTAssertEqual(inst.text?.status, NarrativeStatus(rawValue: "generated")!)
		XCTAssertEqual(inst.type?.coding?[0].code, "oral")
		XCTAssertEqual(inst.type?.coding?[0].system?.absoluteString, "http://terminology.hl7.org/CodeSystem/claim-type")
		XCTAssertEqual(inst.use, Use(rawValue: "claim")!)
		
		return inst
	}
	
	func testClaim4() {
		do {
			let instance = try runClaim4()
			try runClaim4(instance.asJSON())
		}
		catch let error {
			XCTAssertTrue(false, "Must instantiate and test Claim successfully, but threw:\n---\n\(error)\n---")
		}
	}
	
	@discardableResult
	func runClaim4(_ json: FHIRJSON? = nil) throws -> SwiftFHIRClaim {
		let inst = (nil != json) ? try instantiateFrom(json: json!) : try instantiateFrom(filename: "claim-example-vision.json")
		
		XCTAssertEqual(inst.careTeam?[0].provider?.reference, "Practitioner/example")
		XCTAssertEqual(inst.careTeam?[0].sequence, 1)
		XCTAssertEqual(inst.created?.description, "2014-08-16")
		XCTAssertEqual(inst.diagnosis?[0].diagnosisCodeableConcept?.coding?[0].code, "654321")
		XCTAssertEqual(inst.diagnosis?[0].sequence, 1)
		XCTAssertEqual(inst.id, "660150")
		XCTAssertEqual(inst.identifier?[0].system?.absoluteString, "http://happysight.com/claim")
		XCTAssertEqual(inst.identifier?[0].value, "6612345")
		XCTAssertEqual(inst.insurance?[0].coverage?.reference, "Coverage/9876B1")
		XCTAssertEqual(inst.insurance?[0].focal, true)
		XCTAssertEqual(inst.insurance?[0].sequence, 1)
		XCTAssertEqual(inst.insurer?.reference, "Organization/2")
		XCTAssertEqual(inst.item?[0].careTeamSequence?[0], 1)
		XCTAssertEqual(inst.item?[0].net?.currency, "USD")
		XCTAssertEqual(inst.item?[0].net?.value, "80.0")
		XCTAssertEqual(inst.item?[0].productOrService?.coding?[0].code, "exam")
		XCTAssertEqual(inst.item?[0].productOrService?.coding?[0].system?.absoluteString, "http://example.org/fhir/CodeSystem/ex-visionservice")
		XCTAssertEqual(inst.item?[0].sequence, 1)
		XCTAssertEqual(inst.item?[0].servicedDate?.description, "2014-08-16")
		XCTAssertEqual(inst.item?[0].unitPrice?.currency, "USD")
		XCTAssertEqual(inst.item?[0].unitPrice?.value, "80.0")
		XCTAssertEqual(inst.meta?.tag?[0].code, "HTEST")
		XCTAssertEqual(inst.meta?.tag?[0].display, "test health data")
		XCTAssertEqual(inst.meta?.tag?[0].system?.absoluteString, "http://terminology.hl7.org/CodeSystem/v3-ActReason")
		XCTAssertEqual(inst.patient?.reference, "Patient/1")
		XCTAssertEqual(inst.payee?.type?.coding?[0].code, "provider")
		XCTAssertEqual(inst.priority?.coding?[0].code, "normal")
		XCTAssertEqual(inst.provider?.reference, "Organization/1")
		XCTAssertEqual(inst.status, FinancialResourceStatusCodes(rawValue: "active")!)
		XCTAssertEqual(inst.text?.div, "<div xmlns=\"http://www.w3.org/1999/xhtml\">A human-readable rendering of the Vision Claim</div>")
		XCTAssertEqual(inst.text?.status, NarrativeStatus(rawValue: "generated")!)
		XCTAssertEqual(inst.type?.coding?[0].code, "vision")
		XCTAssertEqual(inst.type?.coding?[0].system?.absoluteString, "http://terminology.hl7.org/CodeSystem/claim-type")
		XCTAssertEqual(inst.use, Use(rawValue: "claim")!)
		
		return inst
	}
	
	func testClaim5() {
		do {
			let instance = try runClaim5()
			try runClaim5(instance.asJSON())
		}
		catch let error {
			XCTAssertTrue(false, "Must instantiate and test Claim successfully, but threw:\n---\n\(error)\n---")
		}
	}
	
	@discardableResult
	func runClaim5(_ json: FHIRJSON? = nil) throws -> SwiftFHIRClaim {
		let inst = (nil != json) ? try instantiateFrom(json: json!) : try instantiateFrom(filename: "claim-example-vision-glasses-3tier.json")
		
		XCTAssertEqual(inst.careTeam?[0].provider?.reference, "Practitioner/example")
		XCTAssertEqual(inst.careTeam?[0].sequence, 1)
		XCTAssertEqual(inst.contained?[0].id, "device-frame")
		XCTAssertEqual(inst.contained?[1].id, "device-lens")
		XCTAssertEqual(inst.created?.description, "2014-08-16")
		XCTAssertEqual(inst.diagnosis?[0].diagnosisCodeableConcept?.coding?[0].code, "654321")
		XCTAssertEqual(inst.diagnosis?[0].sequence, 1)
		XCTAssertEqual(inst.id, "660152")
		XCTAssertEqual(inst.identifier?[0].system?.absoluteString, "http://happysight.com/claim")
		XCTAssertEqual(inst.identifier?[0].value, "6612347")
		XCTAssertEqual(inst.insurance?[0].claimResponse?.reference, "ClaimResponse/R3500")
		XCTAssertEqual(inst.insurance?[0].coverage?.reference, "Coverage/9876B1")
		XCTAssertEqual(inst.insurance?[0].focal, false)
		XCTAssertEqual(inst.insurance?[0].preAuthRef?[0], "PR7652387237")
		XCTAssertEqual(inst.insurance?[0].sequence, 1)
		XCTAssertEqual(inst.insurance?[1].coverage?.reference, "Coverage/9876B1")
		XCTAssertEqual(inst.insurance?[1].focal, true)
		XCTAssertEqual(inst.insurance?[1].preAuthRef?[0], "AB543GTD7567")
		XCTAssertEqual(inst.insurance?[1].sequence, 2)
		XCTAssertEqual(inst.insurer?.reference, "Organization/2")
		XCTAssertEqual(inst.item?[0].careTeamSequence?[0], 1)
		XCTAssertEqual(inst.item?[0].category?.coding?[0].code, "F6")
		XCTAssertEqual(inst.item?[0].category?.coding?[0].display, "Vision Coverage")
		XCTAssertEqual(inst.item?[0].category?.coding?[0].system?.absoluteString, "http://example.org/fhir/CodeSystem/benefit-subcategory")
		XCTAssertEqual(inst.item?[0].detail?[0].category?.coding?[0].code, "F6")
		XCTAssertEqual(inst.item?[0].detail?[0].category?.coding?[0].display, "Vision Coverage")
		XCTAssertEqual(inst.item?[0].detail?[0].category?.coding?[0].system?.absoluteString, "http://example.org/fhir/CodeSystem/benefit-subcategory")
		XCTAssertEqual(inst.item?[0].detail?[0].factor, "1.1")
		XCTAssertEqual(inst.item?[0].detail?[0].modifier?[0].coding?[0].code, "rooh")
		XCTAssertEqual(inst.item?[0].detail?[0].modifier?[0].coding?[0].system?.absoluteString, "http://terminology.hl7.org/CodeSystem/modifiers")
		XCTAssertEqual(inst.item?[0].detail?[0].net?.currency, "USD")
		XCTAssertEqual(inst.item?[0].detail?[0].net?.value, "110.0")
		XCTAssertEqual(inst.item?[0].detail?[0].productOrService?.coding?[0].code, "frame")
		XCTAssertEqual(inst.item?[0].detail?[0].productOrService?.coding?[0].system?.absoluteString, "http://example.org/fhir/CodeSystem/ex-visionservice")
		XCTAssertEqual(inst.item?[0].detail?[0].revenue?.coding?[0].code, "0010")
		XCTAssertEqual(inst.item?[0].detail?[0].revenue?.coding?[0].display, "Vision Clinic")
		XCTAssertEqual(inst.item?[0].detail?[0].revenue?.coding?[0].system?.absoluteString, "http://terminology.hl7.org/CodeSystem/ex-revenue-center")
		XCTAssertEqual(inst.item?[0].detail?[0].sequence, 1)
		XCTAssertEqual(inst.item?[0].detail?[0].udi?[0].reference, "#device-frame")
		XCTAssertEqual(inst.item?[0].detail?[0].unitPrice?.currency, "USD")
		XCTAssertEqual(inst.item?[0].detail?[0].unitPrice?.value, "100.0")
		XCTAssertEqual(inst.item?[0].detail?[1].category?.coding?[0].code, "F6")
		XCTAssertEqual(inst.item?[0].detail?[1].category?.coding?[0].display, "Vision Coverage")
		XCTAssertEqual(inst.item?[0].detail?[1].category?.coding?[0].system?.absoluteString, "http://example.org/fhir/CodeSystem/benefit-subcategory")
		XCTAssertEqual(inst.item?[0].detail?[1].net?.currency, "USD")
		XCTAssertEqual(inst.item?[0].detail?[1].net?.value, "110.0")
		XCTAssertEqual(inst.item?[0].detail?[1].productOrService?.coding?[0].code, "lens")
		XCTAssertEqual(inst.item?[0].detail?[1].productOrService?.coding?[0].system?.absoluteString, "http://example.org/fhir/CodeSystem/ex-visionservice")
		XCTAssertEqual(inst.item?[0].detail?[1].programCode?[0].coding?[0].code, "none")
		XCTAssertEqual(inst.item?[0].detail?[1].programCode?[0].coding?[0].system?.absoluteString, "http://terminology.hl7.org/CodeSystem/ex-programcode")
		XCTAssertEqual(inst.item?[0].detail?[1].quantity?.value, "2")
		XCTAssertEqual(inst.item?[0].detail?[1].revenue?.coding?[0].code, "0010")
		XCTAssertEqual(inst.item?[0].detail?[1].revenue?.coding?[0].display, "Vision Clinic")
		XCTAssertEqual(inst.item?[0].detail?[1].revenue?.coding?[0].system?.absoluteString, "http://terminology.hl7.org/CodeSystem/ex-revenue-center")
		XCTAssertEqual(inst.item?[0].detail?[1].sequence, 2)
		XCTAssertEqual(inst.item?[0].detail?[1].subDetail?[0].category?.coding?[0].code, "F6")
		XCTAssertEqual(inst.item?[0].detail?[1].subDetail?[0].category?.coding?[0].display, "Vision Coverage")
		XCTAssertEqual(inst.item?[0].detail?[1].subDetail?[0].category?.coding?[0].system?.absoluteString, "http://example.org/fhir/CodeSystem/benefit-subcategory")
		XCTAssertEqual(inst.item?[0].detail?[1].subDetail?[0].factor, "1.1")
		XCTAssertEqual(inst.item?[0].detail?[1].subDetail?[0].modifier?[0].coding?[0].code, "rooh")
		XCTAssertEqual(inst.item?[0].detail?[1].subDetail?[0].modifier?[0].coding?[0].system?.absoluteString, "http://terminology.hl7.org/CodeSystem/modifiers")
		XCTAssertEqual(inst.item?[0].detail?[1].subDetail?[0].net?.currency, "USD")
		XCTAssertEqual(inst.item?[0].detail?[1].subDetail?[0].net?.value, "66.0")
		XCTAssertEqual(inst.item?[0].detail?[1].subDetail?[0].productOrService?.coding?[0].code, "lens")
		XCTAssertEqual(inst.item?[0].detail?[1].subDetail?[0].productOrService?.coding?[0].system?.absoluteString, "http://example.org/fhir/CodeSystem/ex-visionservice")
		XCTAssertEqual(inst.item?[0].detail?[1].subDetail?[0].programCode?[0].coding?[0].code, "none")
		XCTAssertEqual(inst.item?[0].detail?[1].subDetail?[0].programCode?[0].coding?[0].system?.absoluteString, "http://terminology.hl7.org/CodeSystem/ex-programcode")
		XCTAssertEqual(inst.item?[0].detail?[1].subDetail?[0].quantity?.value, "2")
		XCTAssertEqual(inst.item?[0].detail?[1].subDetail?[0].revenue?.coding?[0].code, "0010")
		XCTAssertEqual(inst.item?[0].detail?[1].subDetail?[0].revenue?.coding?[0].display, "Vision Clinic")
		XCTAssertEqual(inst.item?[0].detail?[1].subDetail?[0].revenue?.coding?[0].system?.absoluteString, "http://terminology.hl7.org/CodeSystem/ex-revenue-center")
		XCTAssertEqual(inst.item?[0].detail?[1].subDetail?[0].sequence, 1)
		XCTAssertEqual(inst.item?[0].detail?[1].subDetail?[0].udi?[0].reference, "#device-lens")
		XCTAssertEqual(inst.item?[0].detail?[1].subDetail?[0].unitPrice?.currency, "USD")
		XCTAssertEqual(inst.item?[0].detail?[1].subDetail?[0].unitPrice?.value, "30.0")
		XCTAssertEqual(inst.item?[0].detail?[1].subDetail?[1].category?.coding?[0].code, "F6")
		XCTAssertEqual(inst.item?[0].detail?[1].subDetail?[1].category?.coding?[0].display, "Vision Coverage")
		XCTAssertEqual(inst.item?[0].detail?[1].subDetail?[1].category?.coding?[0].system?.absoluteString, "http://example.org/fhir/CodeSystem/benefit-subcategory")
		XCTAssertEqual(inst.item?[0].detail?[1].subDetail?[1].factor, "1.1")
		XCTAssertEqual(inst.item?[0].detail?[1].subDetail?[1].modifier?[0].coding?[0].code, "rooh")
		XCTAssertEqual(inst.item?[0].detail?[1].subDetail?[1].modifier?[0].coding?[0].system?.absoluteString, "http://terminology.hl7.org/CodeSystem/modifiers")
		XCTAssertEqual(inst.item?[0].detail?[1].subDetail?[1].net?.currency, "USD")
		XCTAssertEqual(inst.item?[0].detail?[1].subDetail?[1].net?.value, "33.0")
		XCTAssertEqual(inst.item?[0].detail?[1].subDetail?[1].productOrService?.coding?[0].code, "hardening")
		XCTAssertEqual(inst.item?[0].detail?[1].subDetail?[1].productOrService?.coding?[0].system?.absoluteString, "http://example.org/fhir/CodeSystem/ex-visionservice")
		XCTAssertEqual(inst.item?[0].detail?[1].subDetail?[1].quantity?.value, "2")
		XCTAssertEqual(inst.item?[0].detail?[1].subDetail?[1].revenue?.coding?[0].code, "0010")
		XCTAssertEqual(inst.item?[0].detail?[1].subDetail?[1].revenue?.coding?[0].display, "Vision Clinic")
		XCTAssertEqual(inst.item?[0].detail?[1].subDetail?[1].revenue?.coding?[0].system?.absoluteString, "http://terminology.hl7.org/CodeSystem/ex-revenue-center")
		XCTAssertEqual(inst.item?[0].detail?[1].subDetail?[1].sequence, 2)
		XCTAssertEqual(inst.item?[0].detail?[1].subDetail?[1].unitPrice?.currency, "USD")
		XCTAssertEqual(inst.item?[0].detail?[1].subDetail?[1].unitPrice?.value, "15.0")
		XCTAssertEqual(inst.item?[0].detail?[1].subDetail?[2].category?.coding?[0].code, "F6")
		XCTAssertEqual(inst.item?[0].detail?[1].subDetail?[2].category?.coding?[0].display, "Vision Coverage")
		XCTAssertEqual(inst.item?[0].detail?[1].subDetail?[2].category?.coding?[0].system?.absoluteString, "http://example.org/fhir/CodeSystem/benefit-subcategory")
		XCTAssertEqual(inst.item?[0].detail?[1].subDetail?[2].factor, "1.1")
		XCTAssertEqual(inst.item?[0].detail?[1].subDetail?[2].modifier?[0].coding?[0].code, "rooh")
		XCTAssertEqual(inst.item?[0].detail?[1].subDetail?[2].modifier?[0].coding?[0].system?.absoluteString, "http://terminology.hl7.org/CodeSystem/modifiers")
		XCTAssertEqual(inst.item?[0].detail?[1].subDetail?[2].net?.currency, "USD")
		XCTAssertEqual(inst.item?[0].detail?[1].subDetail?[2].net?.value, "11.0")
		XCTAssertEqual(inst.item?[0].detail?[1].subDetail?[2].productOrService?.coding?[0].code, "UV coating")
		XCTAssertEqual(inst.item?[0].detail?[1].subDetail?[2].productOrService?.coding?[0].system?.absoluteString, "http://example.org/fhir/CodeSystem/ex-visionservice")
		XCTAssertEqual(inst.item?[0].detail?[1].subDetail?[2].quantity?.value, "2")
		XCTAssertEqual(inst.item?[0].detail?[1].subDetail?[2].revenue?.coding?[0].code, "0010")
		XCTAssertEqual(inst.item?[0].detail?[1].subDetail?[2].revenue?.coding?[0].display, "Vision Clinic")
		XCTAssertEqual(inst.item?[0].detail?[1].subDetail?[2].revenue?.coding?[0].system?.absoluteString, "http://terminology.hl7.org/CodeSystem/ex-revenue-center")
		XCTAssertEqual(inst.item?[0].detail?[1].subDetail?[2].sequence, 3)
		XCTAssertEqual(inst.item?[0].detail?[1].subDetail?[2].unitPrice?.currency, "USD")
		XCTAssertEqual(inst.item?[0].detail?[1].subDetail?[2].unitPrice?.value, "5.0")
		XCTAssertEqual(inst.item?[0].detail?[1].unitPrice?.currency, "USD")
		XCTAssertEqual(inst.item?[0].detail?[1].unitPrice?.value, "55.0")
		XCTAssertEqual(inst.item?[0].detail?[2].category?.coding?[0].code, "F6")
		XCTAssertEqual(inst.item?[0].detail?[2].category?.coding?[0].display, "Vision Coverage")
		XCTAssertEqual(inst.item?[0].detail?[2].category?.coding?[0].system?.absoluteString, "http://example.org/fhir/CodeSystem/benefit-subcategory")
		XCTAssertEqual(inst.item?[0].detail?[2].factor, "0.07")
		XCTAssertEqual(inst.item?[0].detail?[2].net?.currency, "USD")
		XCTAssertEqual(inst.item?[0].detail?[2].net?.value, "15.4")
		XCTAssertEqual(inst.item?[0].detail?[2].productOrService?.coding?[0].code, "fst")
		XCTAssertEqual(inst.item?[0].detail?[2].productOrService?.coding?[0].system?.absoluteString, "http://example.org/fhir/CodeSystem/ex-visionservice")
		XCTAssertEqual(inst.item?[0].detail?[2].revenue?.coding?[0].code, "0010")
		XCTAssertEqual(inst.item?[0].detail?[2].revenue?.coding?[0].display, "Vision Clinic")
		XCTAssertEqual(inst.item?[0].detail?[2].revenue?.coding?[0].system?.absoluteString, "http://terminology.hl7.org/CodeSystem/ex-revenue-center")
		XCTAssertEqual(inst.item?[0].detail?[2].sequence, 3)
		XCTAssertEqual(inst.item?[0].detail?[2].unitPrice?.currency, "USD")
		XCTAssertEqual(inst.item?[0].detail?[2].unitPrice?.value, "220.0")
		XCTAssertEqual(inst.item?[0].modifier?[0].coding?[0].code, "rooh")
		XCTAssertEqual(inst.item?[0].modifier?[0].coding?[0].system?.absoluteString, "http://terminology.hl7.org/CodeSystem/modifiers")
		XCTAssertEqual(inst.item?[0].net?.currency, "USD")
		XCTAssertEqual(inst.item?[0].net?.value, "235.4")
		XCTAssertEqual(inst.item?[0].productOrService?.coding?[0].code, "glasses")
		XCTAssertEqual(inst.item?[0].productOrService?.coding?[0].system?.absoluteString, "http://example.org/fhir/CodeSystem/ex-visionservice")
		XCTAssertEqual(inst.item?[0].programCode?[0].coding?[0].code, "none")
		XCTAssertEqual(inst.item?[0].programCode?[0].coding?[0].system?.absoluteString, "http://terminology.hl7.org/CodeSystem/ex-programcode")
		XCTAssertEqual(inst.item?[0].revenue?.coding?[0].code, "0010")
		XCTAssertEqual(inst.item?[0].revenue?.coding?[0].display, "Vision Clinic")
		XCTAssertEqual(inst.item?[0].revenue?.coding?[0].system?.absoluteString, "http://terminology.hl7.org/CodeSystem/ex-revenue-center")
		XCTAssertEqual(inst.item?[0].sequence, 1)
		XCTAssertEqual(inst.item?[0].servicedDate?.description, "2014-08-16")
		XCTAssertEqual(inst.item?[0].unitPrice?.currency, "USD")
		XCTAssertEqual(inst.item?[0].unitPrice?.value, "235.4")
		XCTAssertEqual(inst.meta?.tag?[0].code, "HTEST")
		XCTAssertEqual(inst.meta?.tag?[0].display, "test health data")
		XCTAssertEqual(inst.meta?.tag?[0].system?.absoluteString, "http://terminology.hl7.org/CodeSystem/v3-ActReason")
		XCTAssertEqual(inst.patient?.reference, "Patient/1")
		XCTAssertEqual(inst.payee?.type?.coding?[0].code, "provider")
		XCTAssertEqual(inst.prescription?.reference, "http://www.optdocs.com/prescription/12345")
		XCTAssertEqual(inst.priority?.coding?[0].code, "normal")
		XCTAssertEqual(inst.provider?.reference, "Organization/1")
		XCTAssertEqual(inst.status, FinancialResourceStatusCodes(rawValue: "active")!)
		XCTAssertEqual(inst.text?.div, "<div xmlns=\"http://www.w3.org/1999/xhtml\">A human-readable rendering of the Vision Claim for Glasses</div>")
		XCTAssertEqual(inst.text?.status, NarrativeStatus(rawValue: "generated")!)
		XCTAssertEqual(inst.type?.coding?[0].code, "vision")
		XCTAssertEqual(inst.type?.coding?[0].system?.absoluteString, "http://terminology.hl7.org/CodeSystem/claim-type")
		XCTAssertEqual(inst.use, Use(rawValue: "claim")!)
		
		return inst
	}
	
	func testClaim6() {
		do {
			let instance = try runClaim6()
			try runClaim6(instance.asJSON())
		}
		catch let error {
			XCTAssertTrue(false, "Must instantiate and test Claim successfully, but threw:\n---\n\(error)\n---")
		}
	}
	
	@discardableResult
	func runClaim6(_ json: FHIRJSON? = nil) throws -> SwiftFHIRClaim {
		let inst = (nil != json) ? try instantiateFrom(json: json!) : try instantiateFrom(filename: "claim-example-institutional.json")
		
		XCTAssertEqual(inst.careTeam?[0].provider?.reference, "Practitioner/example")
		XCTAssertEqual(inst.careTeam?[0].sequence, 1)
		XCTAssertEqual(inst.created?.description, "2014-08-16")
		XCTAssertEqual(inst.diagnosis?[0].diagnosisCodeableConcept?.coding?[0].code, "654456")
		XCTAssertEqual(inst.diagnosis?[0].sequence, 1)
		XCTAssertEqual(inst.enterer?.identifier?.system?.absoluteString, "http://jurisdiction.org/facilities/HOSP1234/users")
		XCTAssertEqual(inst.enterer?.identifier?.value, "UC1234")
		XCTAssertEqual(inst.facility?.identifier?.system?.absoluteString, "http://jurisdiction.org/facilities")
		XCTAssertEqual(inst.facility?.identifier?.value, "HOSP1234")
		XCTAssertEqual(inst.id, "960150")
		XCTAssertEqual(inst.identifier?[0].system?.absoluteString, "http://happyhospital.com/claim")
		XCTAssertEqual(inst.identifier?[0].value, "9612345")
		XCTAssertEqual(inst.insurance?[0].coverage?.reference, "Coverage/9876B1")
		XCTAssertEqual(inst.insurance?[0].focal, true)
		XCTAssertEqual(inst.insurance?[0].sequence, 1)
		XCTAssertEqual(inst.insurer?.reference, "Organization/2")
		XCTAssertEqual(inst.item?[0].careTeamSequence?[0], 1)
		XCTAssertEqual(inst.item?[0].encounter?[0].reference, "Encounter/example")
		XCTAssertEqual(inst.item?[0].net?.currency, "USD")
		XCTAssertEqual(inst.item?[0].net?.value, "125.0")
		XCTAssertEqual(inst.item?[0].productOrService?.coding?[0].code, "exam")
		XCTAssertEqual(inst.item?[0].productOrService?.coding?[0].system?.absoluteString, "http://hl7.org/fhir/ex-serviceproduct")
		XCTAssertEqual(inst.item?[0].sequence, 1)
		XCTAssertEqual(inst.item?[0].servicedDate?.description, "2014-08-16")
		XCTAssertEqual(inst.item?[0].unitPrice?.currency, "USD")
		XCTAssertEqual(inst.item?[0].unitPrice?.value, "125.0")
		XCTAssertEqual(inst.meta?.tag?[0].code, "HTEST")
		XCTAssertEqual(inst.meta?.tag?[0].display, "test health data")
		XCTAssertEqual(inst.meta?.tag?[0].system?.absoluteString, "http://terminology.hl7.org/CodeSystem/v3-ActReason")
		XCTAssertEqual(inst.patient?.reference, "Patient/1")
		XCTAssertEqual(inst.payee?.type?.coding?[0].code, "provider")
		XCTAssertEqual(inst.priority?.coding?[0].code, "normal")
		XCTAssertEqual(inst.procedure?[0].date?.description, "2014-08-16")
		XCTAssertEqual(inst.procedure?[0].procedureCodeableConcept?.coding?[0].code, "SDI9901")
		XCTAssertEqual(inst.procedure?[0].procedureCodeableConcept?.text, "Subcutaneous diagnostic implant")
		XCTAssertEqual(inst.procedure?[0].sequence, 1)
		XCTAssertEqual(inst.procedure?[0].type?[0].coding?[0].code, "primary")
		XCTAssertEqual(inst.procedure?[0].udi?[0].reference, "Device/example")
		XCTAssertEqual(inst.provider?.reference, "Organization/1")
		XCTAssertEqual(inst.status, FinancialResourceStatusCodes(rawValue: "active")!)
		XCTAssertEqual(inst.subType?.coding?[0].code, "emergency")
		XCTAssertEqual(inst.subType?.coding?[0].system?.absoluteString, "http://terminology.hl7.org/CodeSystem/ex-claimsubtype")
		XCTAssertEqual(inst.text?.div, "<div xmlns=\"http://www.w3.org/1999/xhtml\">A human-readable rendering of the Claim</div>")
		XCTAssertEqual(inst.text?.status, NarrativeStatus(rawValue: "generated")!)
		XCTAssertEqual(inst.total?.currency, "USD")
		XCTAssertEqual(inst.total?.value, "125.0")
		XCTAssertEqual(inst.type?.coding?[0].code, "institutional")
		XCTAssertEqual(inst.type?.coding?[0].system?.absoluteString, "http://terminology.hl7.org/CodeSystem/claim-type")
		XCTAssertEqual(inst.use, Use(rawValue: "claim")!)
		
		return inst
	}
	
	func testClaim7() {
		do {
			let instance = try runClaim7()
			try runClaim7(instance.asJSON())
		}
		catch let error {
			XCTAssertTrue(false, "Must instantiate and test Claim successfully, but threw:\n---\n\(error)\n---")
		}
	}
	
	@discardableResult
	func runClaim7(_ json: FHIRJSON? = nil) throws -> SwiftFHIRClaim {
		let inst = (nil != json) ? try instantiateFrom(json: json!) : try instantiateFrom(filename: "claim-example-oral-contained.json")
		
		XCTAssertEqual(inst.careTeam?[0].provider?.reference, "#provider-1")
		XCTAssertEqual(inst.careTeam?[0].sequence, 1)
		XCTAssertEqual(inst.contained?[0].id, "org-insurer")
		XCTAssertEqual(inst.contained?[1].id, "org-org")
		XCTAssertEqual(inst.contained?[2].id, "provider-1")
		XCTAssertEqual(inst.contained?[3].id, "patient-1")
		XCTAssertEqual(inst.contained?[4].id, "coverage-1")
		XCTAssertEqual(inst.created?.description, "2014-08-16")
		XCTAssertEqual(inst.diagnosis?[0].diagnosisCodeableConcept?.coding?[0].code, "123456")
		XCTAssertEqual(inst.diagnosis?[0].sequence, 1)
		XCTAssertEqual(inst.id, "100152")
		XCTAssertEqual(inst.identifier?[0].system?.absoluteString, "http://happyvalley.com/claim")
		XCTAssertEqual(inst.identifier?[0].value, "12347")
		XCTAssertEqual(inst.insurance?[0].coverage?.reference, "#coverage-1")
		XCTAssertEqual(inst.insurance?[0].focal, true)
		XCTAssertEqual(inst.insurance?[0].sequence, 1)
		XCTAssertEqual(inst.insurer?.reference, "#org-insurer")
		XCTAssertEqual(inst.item?[0].careTeamSequence?[0], 1)
		XCTAssertEqual(inst.item?[0].net?.currency, "USD")
		XCTAssertEqual(inst.item?[0].net?.value, "135.57")
		XCTAssertEqual(inst.item?[0].productOrService?.coding?[0].code, "1200")
		XCTAssertEqual(inst.item?[0].sequence, 1)
		XCTAssertEqual(inst.item?[0].servicedDate?.description, "2014-08-16")
		XCTAssertEqual(inst.item?[0].unitPrice?.currency, "USD")
		XCTAssertEqual(inst.item?[0].unitPrice?.value, "135.57")
		XCTAssertEqual(inst.meta?.tag?[0].code, "HTEST")
		XCTAssertEqual(inst.meta?.tag?[0].display, "test health data")
		XCTAssertEqual(inst.meta?.tag?[0].system?.absoluteString, "http://terminology.hl7.org/CodeSystem/v3-ActReason")
		XCTAssertEqual(inst.patient?.reference, "#patient-1")
		XCTAssertEqual(inst.payee?.type?.coding?[0].code, "provider")
		XCTAssertEqual(inst.priority?.coding?[0].code, "normal")
		XCTAssertEqual(inst.provider?.reference, "#org-org")
		XCTAssertEqual(inst.status, FinancialResourceStatusCodes(rawValue: "active")!)
		XCTAssertEqual(inst.text?.div, "<div xmlns=\"http://www.w3.org/1999/xhtml\">A human-readable rendering of the Oral Health Claim</div>")
		XCTAssertEqual(inst.text?.status, NarrativeStatus(rawValue: "generated")!)
		XCTAssertEqual(inst.type?.coding?[0].code, "oral")
		XCTAssertEqual(inst.type?.coding?[0].system?.absoluteString, "http://terminology.hl7.org/CodeSystem/claim-type")
		XCTAssertEqual(inst.use, Use(rawValue: "claim")!)
		
		return inst
	}
	
	func testClaim8() {
		do {
			let instance = try runClaim8()
			try runClaim8(instance.asJSON())
		}
		catch let error {
			XCTAssertTrue(false, "Must instantiate and test Claim successfully, but threw:\n---\n\(error)\n---")
		}
	}
	
	@discardableResult
	func runClaim8(_ json: FHIRJSON? = nil) throws -> SwiftFHIRClaim {
		let inst = (nil != json) ? try instantiateFrom(json: json!) : try instantiateFrom(filename: "claim-example-pharmacy-medication.json")
		
		XCTAssertEqual(inst.careTeam?[0].provider?.reference, "Practitioner/example")
		XCTAssertEqual(inst.careTeam?[0].sequence, 1)
		XCTAssertEqual(inst.created?.description, "2014-08-16")
		XCTAssertEqual(inst.diagnosis?[0].diagnosisCodeableConcept?.coding?[0].code, "654456")
		XCTAssertEqual(inst.diagnosis?[0].sequence, 1)
		XCTAssertEqual(inst.id, "760151")
		XCTAssertEqual(inst.identifier?[0].system?.absoluteString, "http://happypharma.com/claim")
		XCTAssertEqual(inst.identifier?[0].value, "7612345")
		XCTAssertEqual(inst.insurance?[0].coverage?.reference, "Coverage/9876B1")
		XCTAssertEqual(inst.insurance?[0].focal, true)
		XCTAssertEqual(inst.insurance?[0].sequence, 1)
		XCTAssertEqual(inst.insurer?.reference, "Organization/2")
		XCTAssertEqual(inst.item?[0].careTeamSequence?[0], 1)
		XCTAssertEqual(inst.item?[0].detail?[0].net?.currency, "USD")
		XCTAssertEqual(inst.item?[0].detail?[0].net?.value, "45.0")
		XCTAssertEqual(inst.item?[0].detail?[0].productOrService?.coding?[0].code, "drugcost")
		XCTAssertEqual(inst.item?[0].detail?[0].productOrService?.coding?[0].system?.absoluteString, "http://hl7.org/fhir/ex-pharmaservice")
		XCTAssertEqual(inst.item?[0].detail?[0].sequence, 1)
		XCTAssertEqual(inst.item?[0].detail?[1].net?.currency, "USD")
		XCTAssertEqual(inst.item?[0].detail?[1].net?.value, "9.0")
		XCTAssertEqual(inst.item?[0].detail?[1].productOrService?.coding?[0].code, "markup")
		XCTAssertEqual(inst.item?[0].detail?[1].productOrService?.coding?[0].system?.absoluteString, "http://hl7.org/fhir/ex-pharmaservice")
		XCTAssertEqual(inst.item?[0].detail?[1].sequence, 2)
		XCTAssertEqual(inst.item?[0].detail?[2].net?.currency, "USD")
		XCTAssertEqual(inst.item?[0].detail?[2].net?.value, "36.0")
		XCTAssertEqual(inst.item?[0].detail?[2].productOrService?.coding?[0].code, "dispensefee")
		XCTAssertEqual(inst.item?[0].detail?[2].productOrService?.coding?[0].system?.absoluteString, "http://hl7.org/fhir/ex-pharmaservice")
		XCTAssertEqual(inst.item?[0].detail?[2].sequence, 3)
		XCTAssertEqual(inst.item?[0].informationSequence?[0], 1)
		XCTAssertEqual(inst.item?[0].informationSequence?[1], 2)
		XCTAssertEqual(inst.item?[0].informationSequence?[2], 3)
		XCTAssertEqual(inst.item?[0].net?.currency, "USD")
		XCTAssertEqual(inst.item?[0].net?.value, "90.0")
		XCTAssertEqual(inst.item?[0].productOrService?.coding?[0].code, "562721")
		XCTAssertEqual(inst.item?[0].productOrService?.coding?[0].display, "Alprazolam 0.25mg (Xanax)")
		XCTAssertEqual(inst.item?[0].productOrService?.coding?[0].system?.absoluteString, "http://www.nlm.nih.gov/research/umls/rxnorm")
		XCTAssertEqual(inst.item?[0].quantity?.code, "TAB")
		XCTAssertEqual(inst.item?[0].quantity?.system?.absoluteString, "http://unitsofmeasure.org")
		XCTAssertEqual(inst.item?[0].quantity?.unit, "TAB")
		XCTAssertEqual(inst.item?[0].quantity?.value, "90")
		XCTAssertEqual(inst.item?[0].sequence, 1)
		XCTAssertEqual(inst.item?[0].servicedDate?.description, "2014-08-16")
		XCTAssertEqual(inst.meta?.tag?[0].code, "HTEST")
		XCTAssertEqual(inst.meta?.tag?[0].display, "test health data")
		XCTAssertEqual(inst.meta?.tag?[0].system?.absoluteString, "http://terminology.hl7.org/CodeSystem/v3-ActReason")
		XCTAssertEqual(inst.originalPrescription?.reference, "http://pharmacy.org/MedicationRequest/AB1202B")
		XCTAssertEqual(inst.patient?.reference, "Patient/1")
		XCTAssertEqual(inst.payee?.type?.coding?[0].code, "provider")
		XCTAssertEqual(inst.prescription?.reference, "http://pharmacy.org/MedicationRequest/AB1234G")
		XCTAssertEqual(inst.priority?.coding?[0].code, "stat")
		XCTAssertEqual(inst.provider?.reference, "Organization/1")
		XCTAssertEqual(inst.status, FinancialResourceStatusCodes(rawValue: "active")!)
		XCTAssertEqual(inst.supportingInfo?[0].category?.coding?[0].code, "pharmacyrefill")
		XCTAssertEqual(inst.supportingInfo?[0].code?.coding?[0].code, "new")
		XCTAssertEqual(inst.supportingInfo?[0].code?.coding?[0].system?.absoluteString, "http://example.org/fhir/CodeSystem/pharmacy-refill")
		XCTAssertEqual(inst.supportingInfo?[0].sequence, 1)
		XCTAssertEqual(inst.supportingInfo?[1].category?.coding?[0].code, "pharmacyinformation")
		XCTAssertEqual(inst.supportingInfo?[1].code?.coding?[0].code, "refillsremaining")
		XCTAssertEqual(inst.supportingInfo?[1].code?.coding?[0].system?.absoluteString, "http://example.org/fhir/CodeSystem/pharmacy-information")
		XCTAssertEqual(inst.supportingInfo?[1].sequence, 2)
		XCTAssertEqual(inst.supportingInfo?[1].valueQuantity?.value, "2")
		XCTAssertEqual(inst.supportingInfo?[2].category?.coding?[0].code, "pharmacyinformation")
		XCTAssertEqual(inst.supportingInfo?[2].code?.coding?[0].code, "dayssupply")
		XCTAssertEqual(inst.supportingInfo?[2].code?.coding?[0].system?.absoluteString, "http://example.org/fhir/CodeSystem/pharmacy-information")
		XCTAssertEqual(inst.supportingInfo?[2].sequence, 3)
		XCTAssertEqual(inst.supportingInfo?[2].valueQuantity?.value, "90")
		XCTAssertEqual(inst.text?.div, "<div xmlns=\"http://www.w3.org/1999/xhtml\">A human-readable rendering of the Pharmacy Claim</div>")
		XCTAssertEqual(inst.text?.status, NarrativeStatus(rawValue: "generated")!)
		XCTAssertEqual(inst.total?.currency, "USD")
		XCTAssertEqual(inst.total?.value, "90.0")
		XCTAssertEqual(inst.type?.coding?[0].code, "pharmacy")
		XCTAssertEqual(inst.type?.coding?[0].system?.absoluteString, "http://terminology.hl7.org/CodeSystem/claim-type")
		XCTAssertEqual(inst.use, Use(rawValue: "claim")!)
		
		return inst
	}
	
	func testClaim9() {
		do {
			let instance = try runClaim9()
			try runClaim9(instance.asJSON())
		}
		catch let error {
			XCTAssertTrue(false, "Must instantiate and test Claim successfully, but threw:\n---\n\(error)\n---")
		}
	}
	
	@discardableResult
	func runClaim9(_ json: FHIRJSON? = nil) throws -> SwiftFHIRClaim {
		let inst = (nil != json) ? try instantiateFrom(json: json!) : try instantiateFrom(filename: "claim-example-oral-orthoplan.json")
		
		XCTAssertEqual(inst.careTeam?[0].provider?.reference, "Practitioner/example")
		XCTAssertEqual(inst.careTeam?[0].sequence, 1)
		XCTAssertEqual(inst.created?.description, "2015-03-16")
		XCTAssertEqual(inst.diagnosis?[0].diagnosisCodeableConcept?.coding?[0].code, "123457")
		XCTAssertEqual(inst.diagnosis?[0].diagnosisCodeableConcept?.coding?[0].system?.absoluteString, "http://hl7.org/fhir/sid/icd-10")
		XCTAssertEqual(inst.diagnosis?[0].sequence, 1)
		XCTAssertEqual(inst.fundsReserve?.coding?[0].code, "provider")
		XCTAssertEqual(inst.id, "100153")
		XCTAssertEqual(inst.identifier?[0].system?.absoluteString, "http://happyvalley.com/claim")
		XCTAssertEqual(inst.identifier?[0].value, "12355")
		XCTAssertEqual(inst.insurance?[0].coverage?.reference, "Coverage/9876B1")
		XCTAssertEqual(inst.insurance?[0].focal, true)
		XCTAssertEqual(inst.insurance?[0].sequence, 1)
		XCTAssertEqual(inst.insurer?.reference, "Organization/2")
		XCTAssertEqual(inst.item?[0].careTeamSequence?[0], 1)
		XCTAssertEqual(inst.item?[0].detail?[0].net?.currency, "USD")
		XCTAssertEqual(inst.item?[0].detail?[0].net?.value, "1000.0")
		XCTAssertEqual(inst.item?[0].detail?[0].productOrService?.coding?[0].code, "ORTHOEXAM")
		XCTAssertEqual(inst.item?[0].detail?[0].productOrService?.coding?[0].system?.absoluteString, "http://example.org/fhir/oralservicecodes")
		XCTAssertEqual(inst.item?[0].detail?[0].sequence, 1)
		XCTAssertEqual(inst.item?[0].detail?[0].unitPrice?.currency, "USD")
		XCTAssertEqual(inst.item?[0].detail?[0].unitPrice?.value, "1000.0")
		XCTAssertEqual(inst.item?[0].detail?[1].net?.currency, "USD")
		XCTAssertEqual(inst.item?[0].detail?[1].net?.value, "1500.0")
		XCTAssertEqual(inst.item?[0].detail?[1].productOrService?.coding?[0].code, "ORTHODIAG")
		XCTAssertEqual(inst.item?[0].detail?[1].productOrService?.coding?[0].system?.absoluteString, "http://example.org/fhir/oralservicecodes")
		XCTAssertEqual(inst.item?[0].detail?[1].sequence, 2)
		XCTAssertEqual(inst.item?[0].detail?[1].unitPrice?.currency, "USD")
		XCTAssertEqual(inst.item?[0].detail?[1].unitPrice?.value, "1500.0")
		XCTAssertEqual(inst.item?[0].detail?[2].net?.currency, "USD")
		XCTAssertEqual(inst.item?[0].detail?[2].net?.value, "500.0")
		XCTAssertEqual(inst.item?[0].detail?[2].productOrService?.coding?[0].code, "ORTHOINITIAL")
		XCTAssertEqual(inst.item?[0].detail?[2].productOrService?.coding?[0].system?.absoluteString, "http://example.org/fhir/oralservicecodes")
		XCTAssertEqual(inst.item?[0].detail?[2].sequence, 3)
		XCTAssertEqual(inst.item?[0].detail?[2].unitPrice?.currency, "USD")
		XCTAssertEqual(inst.item?[0].detail?[2].unitPrice?.value, "500.0")
		XCTAssertEqual(inst.item?[0].detail?[3].productOrService?.coding?[0].code, "ORTHOMONTHS")
		XCTAssertEqual(inst.item?[0].detail?[3].productOrService?.coding?[0].system?.absoluteString, "http://example.org/fhir/oralservicecodes")
		XCTAssertEqual(inst.item?[0].detail?[3].quantity?.value, "24")
		XCTAssertEqual(inst.item?[0].detail?[3].sequence, 4)
		XCTAssertEqual(inst.item?[0].detail?[4].net?.currency, "USD")
		XCTAssertEqual(inst.item?[0].detail?[4].net?.value, "250.0")
		XCTAssertEqual(inst.item?[0].detail?[4].productOrService?.coding?[0].code, "ORTHOPERIODIC")
		XCTAssertEqual(inst.item?[0].detail?[4].productOrService?.coding?[0].system?.absoluteString, "http://example.org/fhir/oralservicecodes")
		XCTAssertEqual(inst.item?[0].detail?[4].quantity?.value, "24")
		XCTAssertEqual(inst.item?[0].detail?[4].sequence, 5)
		XCTAssertEqual(inst.item?[0].detail?[4].unitPrice?.currency, "USD")
		XCTAssertEqual(inst.item?[0].detail?[4].unitPrice?.value, "250.0")
		XCTAssertEqual(inst.item?[0].diagnosisSequence?[0], 1)
		XCTAssertEqual(inst.item?[0].net?.currency, "USD")
		XCTAssertEqual(inst.item?[0].net?.value, "9000.0")
		XCTAssertEqual(inst.item?[0].productOrService?.coding?[0].code, "ORTHPLAN")
		XCTAssertEqual(inst.item?[0].productOrService?.coding?[0].system?.absoluteString, "http://example.org/fhir/oralservicecodes")
		XCTAssertEqual(inst.item?[0].sequence, 1)
		XCTAssertEqual(inst.item?[0].servicedDate?.description, "2015-05-16")
		XCTAssertEqual(inst.item?[0].unitPrice?.currency, "USD")
		XCTAssertEqual(inst.item?[0].unitPrice?.value, "9000.0")
		XCTAssertEqual(inst.item?[1].bodySite?.coding?[0].code, "21")
		XCTAssertEqual(inst.item?[1].bodySite?.coding?[0].system?.absoluteString, "http://fdi.org/fhir/oraltoothcodes")
		XCTAssertEqual(inst.item?[1].careTeamSequence?[0], 1)
		XCTAssertEqual(inst.item?[1].net?.currency, "USD")
		XCTAssertEqual(inst.item?[1].net?.value, "105.0")
		XCTAssertEqual(inst.item?[1].productOrService?.coding?[0].code, "21211")
		XCTAssertEqual(inst.item?[1].productOrService?.coding?[0].system?.absoluteString, "http://example.org/fhir/oralservicecodes")
		XCTAssertEqual(inst.item?[1].sequence, 2)
		XCTAssertEqual(inst.item?[1].servicedDate?.description, "2014-08-16")
		XCTAssertEqual(inst.item?[1].subSite?[0].coding?[0].code, "L")
		XCTAssertEqual(inst.item?[1].subSite?[0].coding?[0].system?.absoluteString, "http://fdi.org/fhir/oralsurfacecodes")
		XCTAssertEqual(inst.item?[1].unitPrice?.currency, "USD")
		XCTAssertEqual(inst.item?[1].unitPrice?.value, "105.0")
		XCTAssertEqual(inst.item?[2].bodySite?.coding?[0].code, "36")
		XCTAssertEqual(inst.item?[2].bodySite?.coding?[0].system?.absoluteString, "http://fdi.org/fhir/oraltoothcodes")
		XCTAssertEqual(inst.item?[2].careTeamSequence?[0], 1)
		XCTAssertEqual(inst.item?[2].detail?[0].net?.currency, "USD")
		XCTAssertEqual(inst.item?[2].detail?[0].net?.value, "750.0")
		XCTAssertEqual(inst.item?[2].detail?[0].productOrService?.coding?[0].code, "27211")
		XCTAssertEqual(inst.item?[2].detail?[0].productOrService?.coding?[0].system?.absoluteString, "http://example.org/fhir/oralservicecodes")
		XCTAssertEqual(inst.item?[2].detail?[0].sequence, 1)
		XCTAssertEqual(inst.item?[2].detail?[0].unitPrice?.currency, "USD")
		XCTAssertEqual(inst.item?[2].detail?[0].unitPrice?.value, "750.0")
		XCTAssertEqual(inst.item?[2].detail?[1].net?.currency, "USD")
		XCTAssertEqual(inst.item?[2].detail?[1].net?.value, "350.0")
		XCTAssertEqual(inst.item?[2].detail?[1].productOrService?.coding?[0].code, "lab")
		XCTAssertEqual(inst.item?[2].detail?[1].productOrService?.coding?[0].system?.absoluteString, "http://example.org/fhir/oralservicecodes")
		XCTAssertEqual(inst.item?[2].detail?[1].sequence, 2)
		XCTAssertEqual(inst.item?[2].detail?[1].unitPrice?.currency, "USD")
		XCTAssertEqual(inst.item?[2].detail?[1].unitPrice?.value, "350.0")
		XCTAssertEqual(inst.item?[2].net?.currency, "USD")
		XCTAssertEqual(inst.item?[2].net?.value, "1100.0")
		XCTAssertEqual(inst.item?[2].productOrService?.coding?[0].code, "27211")
		XCTAssertEqual(inst.item?[2].productOrService?.coding?[0].system?.absoluteString, "http://example.org/fhir/oralservicecodes")
		XCTAssertEqual(inst.item?[2].sequence, 3)
		XCTAssertEqual(inst.item?[2].servicedDate?.description, "2014-08-16")
		XCTAssertEqual(inst.item?[2].unitPrice?.currency, "USD")
		XCTAssertEqual(inst.item?[2].unitPrice?.value, "1100.0")
		XCTAssertEqual(inst.meta?.tag?[0].code, "HTEST")
		XCTAssertEqual(inst.meta?.tag?[0].display, "test health data")
		XCTAssertEqual(inst.meta?.tag?[0].system?.absoluteString, "http://terminology.hl7.org/CodeSystem/v3-ActReason")
		XCTAssertEqual(inst.patient?.reference, "Patient/1")
		XCTAssertEqual(inst.payee?.type?.coding?[0].code, "provider")
		XCTAssertEqual(inst.priority?.coding?[0].code, "normal")
		XCTAssertEqual(inst.provider?.reference, "Organization/1")
		XCTAssertEqual(inst.status, FinancialResourceStatusCodes(rawValue: "active")!)
		XCTAssertEqual(inst.text?.div, "<div xmlns=\"http://www.w3.org/1999/xhtml\">A human-readable rendering of the Oral Health Claim</div>")
		XCTAssertEqual(inst.text?.status, NarrativeStatus(rawValue: "generated")!)
		XCTAssertEqual(inst.type?.coding?[0].code, "oral")
		XCTAssertEqual(inst.type?.coding?[0].system?.absoluteString, "http://terminology.hl7.org/CodeSystem/claim-type")
		XCTAssertEqual(inst.use, Use(rawValue: "preauthorization")!)
		
		return inst
	}
	
	func testClaim10() {
		do {
			let instance = try runClaim10()
			try runClaim10(instance.asJSON())
		}
		catch let error {
			XCTAssertTrue(false, "Must instantiate and test Claim successfully, but threw:\n---\n\(error)\n---")
		}
	}
	
	@discardableResult
	func runClaim10(_ json: FHIRJSON? = nil) throws -> SwiftFHIRClaim {
		let inst = (nil != json) ? try instantiateFrom(json: json!) : try instantiateFrom(filename: "claim-example-cms1500-medical.json")
		
		XCTAssertEqual(inst.careTeam?[0].provider?.reference, "Practitioner/example")
		XCTAssertEqual(inst.careTeam?[0].sequence, 1)
		XCTAssertEqual(inst.contained?[0].id, "patient-1")
		XCTAssertEqual(inst.contained?[1].id, "coverage-1")
		XCTAssertEqual(inst.created?.description, "2015-10-16T00:00:00-07:00")
		XCTAssertEqual(inst.diagnosis?[0].diagnosisCodeableConcept?.coding?[0].code, "M96.1")
		XCTAssertEqual(inst.diagnosis?[0].diagnosisCodeableConcept?.coding?[0].display, "Postlaminectomy syndrome")
		XCTAssertEqual(inst.diagnosis?[0].diagnosisCodeableConcept?.coding?[0].system?.absoluteString, "http://hl7.org/fhir/sid/icd-10")
		XCTAssertEqual(inst.diagnosis?[0].sequence, 1)
		XCTAssertEqual(inst.diagnosis?[1].diagnosisCodeableConcept?.coding?[0].code, "G89.4")
		XCTAssertEqual(inst.diagnosis?[1].diagnosisCodeableConcept?.coding?[0].display, "Chronic pain syndrome")
		XCTAssertEqual(inst.diagnosis?[1].diagnosisCodeableConcept?.coding?[0].system?.absoluteString, "http://hl7.org/fhir/sid/icd-10")
		XCTAssertEqual(inst.diagnosis?[1].sequence, 2)
		XCTAssertEqual(inst.diagnosis?[2].diagnosisCodeableConcept?.coding?[0].code, "M53.88")
		XCTAssertEqual(inst.diagnosis?[2].diagnosisCodeableConcept?.coding?[0].display, "Other specified dorsopathies, sacral and sacrococcygeal region")
		XCTAssertEqual(inst.diagnosis?[2].diagnosisCodeableConcept?.coding?[0].system?.absoluteString, "http://hl7.org/fhir/sid/icd-10")
		XCTAssertEqual(inst.diagnosis?[2].sequence, 3)
		XCTAssertEqual(inst.diagnosis?[3].diagnosisCodeableConcept?.coding?[0].code, "M47.816")
		XCTAssertEqual(inst.diagnosis?[3].diagnosisCodeableConcept?.coding?[0].display, "Spondylosis without myelopathy or radiculopathy, lumbar region")
		XCTAssertEqual(inst.diagnosis?[3].diagnosisCodeableConcept?.coding?[0].system?.absoluteString, "http://hl7.org/fhir/sid/icd-10")
		XCTAssertEqual(inst.diagnosis?[3].sequence, 4)
		XCTAssertEqual(inst.id, "MED-00050")
		XCTAssertEqual(inst.identifier?[0].system?.absoluteString, "http://CedarArmsMedicalCenter.com/claim")
		XCTAssertEqual(inst.identifier?[0].value, "MED-00050")
		XCTAssertEqual(inst.insurance?[0].coverage?.reference, "#coverage-1")
		XCTAssertEqual(inst.insurance?[0].focal, true)
		XCTAssertEqual(inst.insurance?[0].identifier?.system?.absoluteString, "http://CedarArmsMedicalCenter.com/claim")
		XCTAssertEqual(inst.insurance?[0].identifier?.value, "MED-00050")
		XCTAssertEqual(inst.insurance?[0].sequence, 1)
		XCTAssertEqual(inst.insurer?.display, "Humana Inc.")
		XCTAssertEqual(inst.insurer?.identifier?.system?.absoluteString, "http://www.bindb.com/bin")
		XCTAssertEqual(inst.insurer?.identifier?.value, "123456")
		XCTAssertEqual(inst.item?[0].careTeamSequence?[0], 1)
		XCTAssertEqual(inst.item?[0].diagnosisSequence?[0], 2)
		XCTAssertEqual(inst.item?[0].diagnosisSequence?[1], 4)
		XCTAssertEqual(inst.item?[0].informationSequence?[0], 1)
		XCTAssertEqual(inst.item?[0].locationCodeableConcept?.coding?[0].code, "24")
		XCTAssertEqual(inst.item?[0].locationCodeableConcept?.coding?[0].display, "Ambulatory Surgical Center")
		XCTAssertEqual(inst.item?[0].locationCodeableConcept?.coding?[0].system?.absoluteString, "https://www.cms.gov/medicare/coding/place-of-service-codes/place_of_service_code_set.html")
		XCTAssertEqual(inst.item?[0].net?.currency, "USD")
		XCTAssertEqual(inst.item?[0].net?.value, "12500.0")
		XCTAssertEqual(inst.item?[0].productOrService?.coding?[0].code, "62264")
		XCTAssertEqual(inst.item?[0].productOrService?.coding?[0].display, "Surgical Procedures on the Spine and Spinal Cord")
		XCTAssertEqual(inst.item?[0].productOrService?.coding?[0].system?.absoluteString, "http://www.ama-assn.org/go/cpt")
		XCTAssertEqual(inst.item?[0].sequence, 1)
		XCTAssertEqual(inst.item?[0].servicedDate?.description, "2015-10-13")
		XCTAssertEqual(inst.item?[0].unitPrice?.currency, "USD")
		XCTAssertEqual(inst.item?[0].unitPrice?.value, "12500.0")
		XCTAssertEqual(inst.meta?.tag?[0].code, "HTEST")
		XCTAssertEqual(inst.meta?.tag?[0].display, "test health data")
		XCTAssertEqual(inst.meta?.tag?[0].system?.absoluteString, "http://terminology.hl7.org/CodeSystem/v3-ActReason")
		XCTAssertEqual(inst.patient?.reference, "#patient-1")
		XCTAssertEqual(inst.payee?.party?.reference, "Organization/1")
		XCTAssertEqual(inst.payee?.type?.coding?[0].code, "provider")
		XCTAssertEqual(inst.payee?.type?.coding?[0].system?.absoluteString, "http://terminology.hl7.org/CodeSystem/payeetype")
		XCTAssertEqual(inst.priority?.coding?[0].code, "normal")
		XCTAssertEqual(inst.provider?.reference, "Organization/1")
		XCTAssertEqual(inst.status, FinancialResourceStatusCodes(rawValue: "active")!)
		XCTAssertEqual(inst.subType?.coding?[0].code, "831")
		XCTAssertEqual(inst.subType?.coding?[0].system?.absoluteString, "https://www.cms.gov/codes/billtype")
		XCTAssertEqual(inst.supportingInfo?[0].category?.coding?[0].code, "hospitalized")
		XCTAssertEqual(inst.supportingInfo?[0].category?.coding?[0].system?.absoluteString, "http://terminology.hl7.org/CodeSystem/claiminformationcategory")
		XCTAssertEqual(inst.supportingInfo?[0].sequence, 1)
		XCTAssertEqual(inst.supportingInfo?[0].timingPeriod?.end?.description, "2015-10-05T00:00:00-07:00")
		XCTAssertEqual(inst.supportingInfo?[0].timingPeriod?.start?.description, "2015-10-01T00:00:00-07:00")
		XCTAssertEqual(inst.supportingInfo?[1].category?.coding?[0].code, "discharge")
		XCTAssertEqual(inst.supportingInfo?[1].category?.coding?[0].system?.absoluteString, "http://terminology.hl7.org/CodeSystem/claiminformationcategory")
		XCTAssertEqual(inst.supportingInfo?[1].code?.coding?[0].code, "01")
		XCTAssertEqual(inst.supportingInfo?[1].code?.coding?[0].display, "Discharge to Home or Self Care")
		XCTAssertEqual(inst.supportingInfo?[1].code?.coding?[0].system?.absoluteString, "https://www.cms.gov/Outreach-and-Education/Medicare-Learning-Network-MLN/MLNMattersArticles/downloads/SE0801.pdf")
		XCTAssertEqual(inst.supportingInfo?[1].sequence, 2)
		XCTAssertEqual(inst.text?.div, "<div xmlns=\"http://www.w3.org/1999/xhtml\">A human-readable rendering of a CMS 1500 Claim</div>")
		XCTAssertEqual(inst.text?.status, NarrativeStatus(rawValue: "generated")!)
		XCTAssertEqual(inst.total?.currency, "USD")
		XCTAssertEqual(inst.total?.value, "12500.0")
		XCTAssertEqual(inst.type?.coding?[0].code, "institutional")
		XCTAssertEqual(inst.type?.coding?[0].system?.absoluteString, "http://terminology.hl7.org/CodeSystem/claim-type")
		XCTAssertEqual(inst.use, Use(rawValue: "claim")!)
		
		return inst
	}
}
